<?xml version="1.0"?>
<Definitions xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ShipBlueprints>
    <ShipBlueprint xsi:type="MyObjectBuilder_ShipBlueprintDefinition">
      <Id Type="MyObjectBuilder_ShipBlueprintDefinition" Subtype="Paolo.SAM" />
      <DisplayName>Paolo</DisplayName>
      <DLC>ScrapRace</DLC>
      <CubeGrids>
        <CubeGrid>
          <SubtypeName />
          <EntityId>143259488890120233</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="56393.395368245518" y="21154.090965635118" z="-9529.87911949565" />
            <Forward x="0.330136448" y="-0.9344997" z="-0.133118153" />
            <Up x="0.9232516" y="0.349034965" z="-0.160564721" />
            <Orientation>
              <X>-0.422598332</X>
              <Y>-0.5048283</Y>
              <Z>-0.383266419</Z>
              <W>0.6478163</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="3" z="2" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="3" z="3" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="4" z="2" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="4" z="3" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="3" z="4" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="4" z="4" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OxygenGenerator">
              <SubtypeName>OxygenGeneratorSmall</SubtypeName>
              <EntityId>91068745966069963</EntityId>
              <Min x="-1" y="3" z="5" />
              <BlockOrientation Forward="Up" Up="Right" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>1</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_GasContainerObject">
                            <SubtypeName>HydrogenBottle</SubtypeName>
                            <GasLevel>1</GasLevel>
                          </PhysicalContent>
                          <ItemId>1</ItemId>
                        </MyObjectBuilder_InventoryItem>
                      </Items>
                      <nextItemId>2</nextItemId>
                      <Volume>1</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyTimerComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_TimerComponent">
                      <Repeat>true</Repeat>
                      <TimeToEvent>0</TimeToEvent>
                      <SetTimeMinutes>0</SetTimeMinutes>
                      <TimerEnabled>false</TimerEnabled>
                      <RemoveEntityOnTimer>false</RemoveEntityOnTimer>
                      <TimerType>Frame10</TimerType>
                      <FramesFromLastTrigger>0</FramesFromLastTrigger>
                      <TimerTickInFrames>300</TimerTickInFrames>
                      <IsSessionUpdateEnabled>false</IsSessionUpdateEnabled>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>O2/H2 Generator</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="4" z="8" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="3" z="8" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="3" z="9" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="4" z="9" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_BatteryBlock">
              <SubtypeName>SmallBlockBatteryBlock</SubtypeName>
              <EntityId>83497863019692812</EntityId>
              <Min x="-1" y="3" z="10" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Battery</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <CurrentStoredPower>0.999993145</CurrentStoredPower>
              <ProducerEnabled>true</ProducerEnabled>
              <MaxStoredPower>0</MaxStoredPower>
              <SemiautoEnabled>false</SemiautoEnabled>
              <OnlyDischargeEnabled>false</OnlyDischargeEnabled>
              <ChargeMode>0</ChargeMode>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="3" z="13" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="3" z="14" />
              <IntegrityPercent>0.535713732</IntegrityPercent>
              <BuildPercent>0.535713732</BuildPercent>
              <ConstructionStockpile>
                <Items xsi:type="MyObjectBuilder_StockpileItem">
                  <Amount>2</Amount>
                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                    <SubtypeName>SteelPlate</SubtypeName>
                  </PhysicalContent>
                </Items>
              </ConstructionStockpile>
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="3" z="15" />
              <IntegrityPercent>0.535713732</IntegrityPercent>
              <BuildPercent>0.535713732</BuildPercent>
              <ConstructionStockpile>
                <Items xsi:type="MyObjectBuilder_StockpileItem">
                  <Amount>2</Amount>
                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                    <SubtypeName>SteelPlate</SubtypeName>
                  </PhysicalContent>
                </Items>
              </ConstructionStockpile>
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="4" z="14" />
              <IntegrityPercent>0.535713732</IntegrityPercent>
              <BuildPercent>0.535713732</BuildPercent>
              <ConstructionStockpile>
                <Items xsi:type="MyObjectBuilder_StockpileItem">
                  <Amount>2</Amount>
                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                    <SubtypeName>SteelPlate</SubtypeName>
                  </PhysicalContent>
                </Items>
                <Items xsi:type="MyObjectBuilder_StockpileItem">
                  <Amount>2</Amount>
                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                    <SubtypeName>MetalGrid</SubtypeName>
                  </PhysicalContent>
                </Items>
              </ConstructionStockpile>
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="4" z="15" />
              <IntegrityPercent>0.535713732</IntegrityPercent>
              <BuildPercent>0.535713732</BuildPercent>
              <ConstructionStockpile>
                <Items xsi:type="MyObjectBuilder_StockpileItem">
                  <Amount>2</Amount>
                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                    <SubtypeName>SteelPlate</SubtypeName>
                  </PhysicalContent>
                </Items>
                <Items xsi:type="MyObjectBuilder_StockpileItem">
                  <Amount>2</Amount>
                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                    <SubtypeName>MetalGrid</SubtypeName>
                  </PhysicalContent>
                </Items>
              </ConstructionStockpile>
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_BatteryBlock">
              <SubtypeName>SmallBlockBatteryBlock</SubtypeName>
              <EntityId>138847386685931675</EntityId>
              <Min x="-1" y="3" z="16" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Battery 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <CurrentStoredPower>0.999993145</CurrentStoredPower>
              <ProducerEnabled>true</ProducerEnabled>
              <MaxStoredPower>0</MaxStoredPower>
              <SemiautoEnabled>false</SemiautoEnabled>
              <OnlyDischargeEnabled>false</OnlyDischargeEnabled>
              <ChargeMode>0</ChargeMode>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="3" z="19" />
              <IntegrityPercent>0.7023728</IntegrityPercent>
              <BuildPercent>0.7023728</BuildPercent>
              <ConstructionStockpile>
                <Items xsi:type="MyObjectBuilder_StockpileItem">
                  <Amount>1</Amount>
                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                    <SubtypeName>SteelPlate</SubtypeName>
                  </PhysicalContent>
                </Items>
              </ConstructionStockpile>
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="3" z="20" />
              <IntegrityPercent>0.535713732</IntegrityPercent>
              <BuildPercent>0.535713732</BuildPercent>
              <ConstructionStockpile>
                <Items xsi:type="MyObjectBuilder_StockpileItem">
                  <Amount>2</Amount>
                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                    <SubtypeName>SteelPlate</SubtypeName>
                  </PhysicalContent>
                </Items>
              </ConstructionStockpile>
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="3" z="21" />
              <IntegrityPercent>0.7023728</IntegrityPercent>
              <BuildPercent>0.7023728</BuildPercent>
              <ConstructionStockpile>
                <Items xsi:type="MyObjectBuilder_StockpileItem">
                  <Amount>1</Amount>
                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                    <SubtypeName>SteelPlate</SubtypeName>
                  </PhysicalContent>
                </Items>
              </ConstructionStockpile>
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="4" z="20" />
              <IntegrityPercent>0.7023728</IntegrityPercent>
              <BuildPercent>0.7023728</BuildPercent>
              <ConstructionStockpile>
                <Items xsi:type="MyObjectBuilder_StockpileItem">
                  <Amount>1</Amount>
                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                    <SubtypeName>SteelPlate</SubtypeName>
                  </PhysicalContent>
                </Items>
              </ConstructionStockpile>
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="4" z="21" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>OffroadSmallSuspension5x5mirrored</SubtypeName>
              <EntityId>90785692907326749</EntityId>
              <Min x="-3" y="3" z="2" />
              <BlockOrientation Forward="Up" Up="Left" />
              <BuiltBy>144115188075855914</BuiltBy>
              <CustomName>Offroad Wheel Suspension 5x5 Left</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>84320920427081690</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0.00326243415</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.5</Height>
              <MaxSteerAngle>0.421865433</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>130</SpeedLimit>
              <PowerNew>0.05</PowerNew>
              <StrengthNew>0.09271054</StrengthNew>
              <FrictionNew>1</FrictionNew>
              <AirShockEnabled>false</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
              <SteeringOverride>0</SteeringOverride>
              <PropulsionOverride>0</PropulsionOverride>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>OffroadSmallSuspension5x5mirrored</SubtypeName>
              <EntityId>96615765618025481</EntityId>
              <Min x="-3" y="3" z="8" />
              <BlockOrientation Forward="Up" Up="Left" />
              <BuiltBy>144115188075855914</BuiltBy>
              <CustomName>Offroad Wheel Suspension 5x5 Left 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>140348160181484289</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0.0119914431</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.5</Height>
              <MaxSteerAngle>0.143419251</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>130</SpeedLimit>
              <PowerNew>0.05</PowerNew>
              <StrengthNew>0.07566</StrengthNew>
              <FrictionNew>1</FrictionNew>
              <AirShockEnabled>false</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
              <SteeringOverride>0</SteeringOverride>
              <PropulsionOverride>0</PropulsionOverride>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>OffroadSmallSuspension5x5mirrored</SubtypeName>
              <EntityId>85424616220813104</EntityId>
              <Min x="-3" y="3" z="14" />
              <BlockOrientation Forward="Up" Up="Left" />
              <BuiltBy>144115188075855914</BuiltBy>
              <CustomName>Offroad Wheel Suspension 5x5 Left 3</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>87617002996000936</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>-0.00493855961</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.5</Height>
              <MaxSteerAngle>0.15722543</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>130</SpeedLimit>
              <PowerNew>0.05</PowerNew>
              <StrengthNew>0.07728538</StrengthNew>
              <FrictionNew>1</FrictionNew>
              <AirShockEnabled>false</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
              <SteeringOverride>0</SteeringOverride>
              <PropulsionOverride>0</PropulsionOverride>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>OffroadSmallSuspension5x5mirrored</SubtypeName>
              <EntityId>124810237199555887</EntityId>
              <Min x="-3" y="3" z="20" />
              <BlockOrientation Forward="Up" Up="Left" />
              <BuiltBy>144115188075855914</BuiltBy>
              <CustomName>Offroad Wheel Suspension 5x5 Left 4</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>87553957787692598</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0.009459749</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.5</Height>
              <MaxSteerAngle>0.436332315</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>130</SpeedLimit>
              <PowerNew>0.05</PowerNew>
              <StrengthNew>0.0946522355</StrengthNew>
              <FrictionNew>1</FrictionNew>
              <AirShockEnabled>false</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
              <SteeringOverride>0</SteeringOverride>
              <PropulsionOverride>0</PropulsionOverride>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>OffroadSmallSuspension5x5</SubtypeName>
              <EntityId>105431993986253281</EntityId>
              <Min x="1" y="3" z="2" />
              <BlockOrientation Forward="Up" Up="Right" />
              <BuiltBy>144115188075855914</BuiltBy>
              <CustomName>Offroad Wheel Suspension 5x5 Right</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>74781138194136161</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>-0.00920245051</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.5</Height>
              <MaxSteerAngle>0.281409681</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>130</SpeedLimit>
              <PowerNew>0.05</PowerNew>
              <StrengthNew>0.0927465856</StrengthNew>
              <FrictionNew>1</FrictionNew>
              <AirShockEnabled>false</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
              <SteeringOverride>0</SteeringOverride>
              <PropulsionOverride>0</PropulsionOverride>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>OffroadSmallSuspension5x5</SubtypeName>
              <EntityId>89111263512875869</EntityId>
              <Min x="1" y="3" z="8" />
              <BlockOrientation Forward="Up" Up="Right" />
              <BuiltBy>144115188075855914</BuiltBy>
              <CustomName>Offroad Wheel Suspension 5x5 Right 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>143536059057947091</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0.001338996</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.5</Height>
              <MaxSteerAngle>0.0924527645</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>130</SpeedLimit>
              <PowerNew>0.05</PowerNew>
              <StrengthNew>0.07573162</StrengthNew>
              <FrictionNew>1</FrictionNew>
              <AirShockEnabled>false</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
              <SteeringOverride>0</SteeringOverride>
              <PropulsionOverride>0</PropulsionOverride>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>OffroadSmallSuspension5x5</SubtypeName>
              <EntityId>78767977603377247</EntityId>
              <Min x="1" y="3" z="14" />
              <BlockOrientation Forward="Up" Up="Right" />
              <BuiltBy>144115188075855914</BuiltBy>
              <CustomName>Offroad Wheel Suspension 5x5 Right 3</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>113358284219231848</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0.0119504463</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.5</Height>
              <MaxSteerAngle>0.10373231</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>130</SpeedLimit>
              <PowerNew>0.05</PowerNew>
              <StrengthNew>0.07732843</StrengthNew>
              <FrictionNew>1</FrictionNew>
              <AirShockEnabled>false</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
              <SteeringOverride>0</SteeringOverride>
              <PropulsionOverride>0</PropulsionOverride>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>OffroadSmallSuspension5x5</SubtypeName>
              <EntityId>86457110733357164</EntityId>
              <Min x="1" y="3" z="20" />
              <BlockOrientation Forward="Up" Up="Right" />
              <BuiltBy>144115188075855914</BuiltBy>
              <CustomName>Offroad Wheel Suspension 5x5 Right 4</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>92710695585814345</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>-0.0104696024</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.5</Height>
              <MaxSteerAngle>0.290179461</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>130</SpeedLimit>
              <PowerNew>0.05</PowerNew>
              <StrengthNew>0.0947216153</StrengthNew>
              <FrictionNew>1</FrictionNew>
              <AirShockEnabled>false</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
              <SteeringOverride>0</SteeringOverride>
              <PropulsionOverride>0</PropulsionOverride>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Conveyor">
              <SubtypeName>SmallShipConveyorHub</SubtypeName>
              <EntityId>126032621841065970</EntityId>
              <Min x="-1" y="5" z="5" />
              <BlockOrientation Forward="Down" Up="Right" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
              <SubtypeName>SmallBlockMediumContainer</SubtypeName>
              <EntityId>91915766877268987</EntityId>
              <Min x="-1" y="5" z="8" />
              <BlockOrientation Forward="Left" Up="Up" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>3.375</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Medium Cargo Container</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
              <SubtypeName>SmallBlockMediumContainer</SubtypeName>
              <EntityId>125130492582373762</EntityId>
              <Min x="-1" y="5" z="11" />
              <BlockOrientation Forward="Left" Up="Up" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>3.375</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Medium Cargo Container 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
              <SubtypeName>SmallBlockMediumContainer</SubtypeName>
              <EntityId>120303196390921875</EntityId>
              <Min x="-1" y="5" z="14" />
              <BlockOrientation Forward="Left" Up="Down" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>3.375</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Medium Cargo Container 3</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
              <SubtypeName>SmallBlockMediumContainer</SubtypeName>
              <EntityId>116494843647382378</EntityId>
              <Min x="-1" y="5" z="17" />
              <BlockOrientation Forward="Right" Up="Down" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>3.375</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Medium Cargo Container 4</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Conveyor">
              <SubtypeName>SmallShipConveyorHub</SubtypeName>
              <EntityId>98727253289592471</EntityId>
              <Min x="-1" y="5" z="20" />
              <BlockOrientation Forward="Down" Up="Left" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Conveyor">
              <SubtypeName>SmallShipConveyorHub</SubtypeName>
              <EntityId>94013272890479024</EntityId>
              <Min x="-1" y="8" z="20" />
              <BlockOrientation Forward="Up" Up="Right" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ShipConnector">
              <SubtypeName>ConnectorMedium</SubtypeName>
              <EntityId>118904621376852451</EntityId>
              <Min x="-1" y="8" z="23" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <DeformationRatio>0.5</DeformationRatio>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>1.152</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyTimerComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_TimerComponent">
                      <Repeat>true</Repeat>
                      <TimeToEvent>0</TimeToEvent>
                      <SetTimeMinutes>0</SetTimeMinutes>
                      <TimerEnabled>true</TimerEnabled>
                      <RemoveEntityOnTimer>false</RemoveEntityOnTimer>
                      <TimerType>Frame10</TimerType>
                      <FramesFromLastTrigger>60</FramesFromLastTrigger>
                      <TimerTickInFrames>80</TimerTickInFrames>
                      <IsSessionUpdateEnabled>false</IsSessionUpdateEnabled>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Connector</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <MasterToSlaveTransform xsi:nil="true" />
              <MasterToSlaveGrid xsi:nil="true" />
              <IsMaster>true</IsMaster>
              <TradingEnabled>false</TradingEnabled>
              <AutoUnlockTime>0</AutoUnlockTime>
              <TimeOfConnection>0</TimeOfConnection>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorAdvancedStator">
              <SubtypeName>MediumHinge</SubtypeName>
              <EntityId>92213184052633281</EntityId>
              <Min x="-1" y="11" z="20" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Hinge 3x3 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>135668425651942564</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <TargetVelocity>0</TargetVelocity>
              <MinAngle>-1.57079637</MinAngle>
              <MaxAngle>1.57079637</MaxAngle>
              <CurrentAngle>6.26727533</CurrentAngle>
              <LimitsActive>false</LimitsActive>
              <RotorLock>true</RotorLock>
              <Torque>448000</Torque>
              <BrakingTorque>0</BrakingTorque>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ConveyorConnector">
              <SubtypeName>ConveyorTubeSmall</SubtypeName>
              <EntityId>85690330558494974</EntityId>
              <Min x="-2" y="6" z="18" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ConveyorConnector">
              <SubtypeName>ConveyorTubeSmallCurved</SubtypeName>
              <EntityId>106573176570939552</EntityId>
              <Min x="-3" y="6" z="18" />
              <BlockOrientation Forward="Left" Up="Down" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorAdvancedStator">
              <SubtypeName>SmallHinge</SubtypeName>
              <EntityId>96023860603321878</EntityId>
              <Min x="-3" y="7" z="18" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Hinge</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>82740918848203530</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <TargetVelocity>-0.005702853</TargetVelocity>
              <MinAngle>-1.57079637</MinAngle>
              <MaxAngle>1.57079637</MaxAngle>
              <CurrentAngle>5.971192</CurrentAngle>
              <LimitsActive>false</LimitsActive>
              <RotorLock>true</RotorLock>
              <Torque>448000</Torque>
              <BrakingTorque>0</BrakingTorque>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>123751300422757126</EntityId>
              <Min x="0" y="8" z="19" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Stockpile_Off</Action>
                      <BlockEntityId>90322105397581187</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff_On</Action>
                      <BlockEntityId>119263352187480575</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>StartCountdown</Action>
                      <BlockEntityId>121499582244597971</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>3</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>StartCountdown</Action>
                      <BlockEntityId>106669052424846362</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>7</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Shoot_On</Action>
                      <BlockEntityId>102062881765568796</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>8</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Start</Action>
                      <BlockEntityId>100987466294016429</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>5000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Cockpit">
              <SubtypeName>SmallBlockCockpit</SubtypeName>
              <EntityId>88977286491200382</EntityId>
              <Min x="-1" y="8" z="5" />
              <IntegrityPercent>0.6226291</IntegrityPercent>
              <BuildPercent>0.6226291</BuildPercent>
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>86</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>SmallTube</SubtypeName>
                          </PhysicalContent>
                          <ItemId>4</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>57</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>Motor</SubtypeName>
                          </PhysicalContent>
                          <ItemId>5</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>7</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>LargeTube</SubtypeName>
                          </PhysicalContent>
                          <ItemId>6</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>95</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>Computer</SubtypeName>
                          </PhysicalContent>
                          <ItemId>7</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>181</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>SteelPlate</SubtypeName>
                          </PhysicalContent>
                          <ItemId>8</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>6</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>Girder</SubtypeName>
                          </PhysicalContent>
                          <ItemId>9</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>45</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>MetalGrid</SubtypeName>
                          </PhysicalContent>
                          <ItemId>10</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>161</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>InteriorPlate</SubtypeName>
                          </PhysicalContent>
                          <ItemId>11</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>6</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>RadioCommunication</SubtypeName>
                          </PhysicalContent>
                          <ItemId>12</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>36</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>Explosives</SubtypeName>
                          </PhysicalContent>
                          <ItemId>13</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>5</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>PowerCell</SubtypeName>
                          </PhysicalContent>
                          <ItemId>14</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>82</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>Construction</SubtypeName>
                          </PhysicalContent>
                          <ItemId>15</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>1</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                            <SubtypeName>HandDrill3Item</SubtypeName>
                            <GunEntity xsi:type="MyObjectBuilder_HandDrill">
                              <SubtypeName>HandDrill3</SubtypeName>
                              <EntityId>0</EntityId>
                              <PersistentFlags>None</PersistentFlags>
                            </GunEntity>
                          </PhysicalContent>
                          <ItemId>16</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>1</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                            <SubtypeName>AngleGrinder3Item</SubtypeName>
                            <GunEntity xsi:type="MyObjectBuilder_AngleGrinder">
                              <SubtypeName>AngleGrinder3</SubtypeName>
                              <EntityId>0</EntityId>
                              <PersistentFlags>None</PersistentFlags>
                            </GunEntity>
                          </PhysicalContent>
                          <ItemId>17</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>1</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                            <SubtypeName>RapidFireAutomaticRifleItem</SubtypeName>
                          </PhysicalContent>
                          <ItemId>18</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>1</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                            <SubtypeName>Welder3Item</SubtypeName>
                            <GunEntity xsi:type="MyObjectBuilder_Welder">
                              <SubtypeName>Welder3</SubtypeName>
                              <EntityId>78956621115349157</EntityId>
                              <PersistentFlags>None</PersistentFlags>
                            </GunEntity>
                          </PhysicalContent>
                          <ItemId>19</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>1</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_GasContainerObject">
                            <SubtypeName>HydrogenBottle</SubtypeName>
                            <GasLevel>1</GasLevel>
                          </PhysicalContent>
                          <ItemId>21</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>10</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_AmmoMagazine">
                            <SubtypeName>NATO_5p56x45mm</SubtypeName>
                            <ProjectilesCount>0</ProjectilesCount>
                          </PhysicalContent>
                          <ItemId>22</ItemId>
                        </MyObjectBuilder_InventoryItem>
                      </Items>
                      <nextItemId>23</nextItemId>
                      <Volume>1</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Cockpit</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <UseSingleWeaponMode>false</UseSingleWeaponMode>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>HingeLock</Action>
                      <BlockEntityId>96023860603321878</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>3</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Reverse</Action>
                      <BlockEntityId>96023860603321878</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>7</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Start</Action>
                      <BlockEntityId>123751300422757126</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>HingeLock</Action>
                      <BlockEntityId>96023860603321878</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Reverse</Action>
                      <BlockEntityId>96023860603321878</BlockEntityId>
                    </Data>
                  </Slot>
                </SlotsGamepad>
              </Toolbar>
              <SelectedGunId xsi:nil="true" />
              <BuildToolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
                <SlotsGamepad />
              </BuildToolbar>
              <PilotRelativeWorld>
                <Position x="-1.9506053924560547" y="-0.70532602071762085" z="-0.43698233366012573" />
                <Forward x="0.85588026" y="-0.437863827" z="0.275215924" />
                <Up x="0.417920172" y="0.899035633" z="0.130681276" />
                <Orientation>
                  <X>-0.13372612</X>
                  <Y>-0.7872263</Y>
                  <Z>-0.180553272</Z>
                  <W>0.5742757</W>
                </Orientation>
              </PilotRelativeWorld>
              <PilotGunDefinition xsi:nil="true" />
              <IsInFirstPersonView>true</IsInFirstPersonView>
              <OxygenLevel>1</OxygenLevel>
              <PilotJetpackEnabled xsi:nil="true" />
              <TextPanels>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <ContentType>SCRIPT</ContentType>
                  <SelectedScript>TSS_ArtificialHorizon</SelectedScript>
                  <TextPadding>2</TextPadding>
                  <CustomizeScripts>true</CustomizeScripts>
                  <ScriptBackgroundColor>
                    <PackedValue>4288108544</PackedValue>
                    <X>0</X>
                    <Y>88</Y>
                    <Z>151</Z>
                    <R>0</R>
                    <G>88</G>
                    <B>151</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <ContentType>SCRIPT</ContentType>
                  <SelectedScript>TSS_EnergyHydrogen</SelectedScript>
                  <TextPadding>2</TextPadding>
                  <CustomizeScripts>true</CustomizeScripts>
                  <ScriptBackgroundColor>
                    <PackedValue>4288108544</PackedValue>
                    <X>0</X>
                    <Y>88</Y>
                    <Z>151</Z>
                    <R>0</R>
                    <G>88</G>
                    <B>151</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <ContentType>SCRIPT</ContentType>
                  <SelectedScript>TSS_Gravity</SelectedScript>
                  <TextPadding>2</TextPadding>
                  <CustomizeScripts>true</CustomizeScripts>
                  <ScriptBackgroundColor>
                    <PackedValue>4288108544</PackedValue>
                    <X>0</X>
                    <Y>88</Y>
                    <Z>151</Z>
                    <R>0</R>
                    <G>88</G>
                    <B>151</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <SelectedScript />
                  <TextPadding>2</TextPadding>
                  <ScriptBackgroundColor>
                    <PackedValue>4288108544</PackedValue>
                    <X>0</X>
                    <Y>88</Y>
                    <Z>151</Z>
                    <R>0</R>
                    <G>88</G>
                    <B>151</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
              </TextPanels>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_RemoteControl">
              <SubtypeName>SmallBlockRemoteControl</SubtypeName>
              <EntityId>77117917421095300</EntityId>
              <Min x="0" y="4" z="13" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Remote Control</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <UseSingleWeaponMode>false</UseSingleWeaponMode>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
                <SlotsGamepad />
              </Toolbar>
              <SelectedGunId xsi:nil="true" />
              <BuildToolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
                <SlotsGamepad />
              </BuildToolbar>
              <PreviousControlledEntityId xsi:nil="true" />
              <AutoPilotEnabled>false</AutoPilotEnabled>
              <FlightMode>0</FlightMode>
              <BindedCamera>0</BindedCamera>
              <CurrentWaypointIndex>-1</CurrentWaypointIndex>
              <Waypoints />
              <Direction>0</Direction>
              <DockingModeEnabled>false</DockingModeEnabled>
              <CollisionAvoidance>false</CollisionAvoidance>
              <Coords />
              <Names />
              <WaypointThresholdDistance>0</WaypointThresholdDistance>
              <IsMainRemoteControl>false</IsMainRemoteControl>
              <WaitForFreeWay>false</WaitForFreeWay>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>115038834545431865</EntityId>
              <Min x="0" y="4" z="19" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Programmable block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Program>/*
* Author: Wanderer

Version: 2.4.2
- Slight improvement of wheel adding algorithm.

*/
class DriverAssistingSystem
{
// General settings.
double _MaxForwardAccel=10;// Maximum forward acceleration in m/s^2.
double _MaxBackwardAccel=10;// Maximum backward acceleration in m/s^2.
double _MaxPowerConsumption=1;// Maximum allowed power output to wheels.
double _NaturalPitchDegree=0;// If vehicle buld with chassis incline in mind,put this incline here.
double _SafeFallVelocity=15;// Vertical velocity which FDS will try to achive near ground level.
double _LeanToSurfaceDistance=15;// Distance at which script will align vehicle to surface curve. Downward camera required.
string _StopLightsGroupName="Stop lights";// Group name of stop/back/break lights which script will search.
string _TurnLightsGroupName="Turn lights";// Group name of stop/back/break lights which script will search.
string _SubgridWheelsGroupName="Subgrid Wheels";// Group of wheels on subgrid. These wheels controll will be overrien.
string _BackupBeeperName="Back-up beeper";// Sound block(s) that will triggered to play when driving backward.
HandbrakeMode _HandbrakeMode=HandbrakeMode.Semi;// Auto handbrakes mode:
// HandbrakeMode.Semi-turn hand brakes ON when no one control vehicle,don't turn OFF when someone get control;
// HandbrakeMode.Auto-turn hand brakes ON when no one control vehicle,turn OFF when someone get control;
// HandbrakeMode.Off -don't turn hand brakes ON when no one control vehicle and don't turn OFF when someone get control.
AckermannFocalPointRef _AckermannFocalPoint=AckermannFocalPointRef.CoM;// Define main turn axle for all wheels
// AckermannFocalPointRef.CoM-main turn axel will be vector from vehicle CoM to Ackermann focal point. Most stable.
// AckermannFocalPointRef.RC-main turn axel will be vector from RC block position to Ackermann focal point. RC block should be between left and right wheels.
// AckermannFocalPointRef.BSphere-main turn axel will be vector from bounding sphere centre to Ackermann focal point.
bool _UseJumpJets=true;// Engage upward thrusters when Spacebar pressed.
bool _UseAdaptiveSteering=true;// Reduce steering angle when driving at high speed.
bool _UseAckermannSteering=true;// Use Ackermann steering scheme.
bool _UseDASAirShock=true; // Use air shock system for suspensions provided by DAS instead of vanilla one.
bool _UseHillDescentControl=false;// Use use soft brakes if lateral velocity exceeds speed limit.
bool _UseGSA=true;// Override gyros or not.
bool _UseTCS=true;// Use all stuff tied to suspensions.
bool _UseFDS=true;// Override upward thrusters or not.
bool _UseSDO=true;// Override other thrusters?
bool _UseLights=true;// Handle stop and turn lights or not.

// Suspension settings.
double _FrwrdSpeedLimitKPH=130;// Suspension wheels speed limit when driving worward.
double _BckwrdSpeedLimitKPH=130;// Suspension wheels speed limit when driving backward.
double _MaxSteerAngleDegree=25;// Suspension wheel maximum steering angle.
double _SusHeightOffset=-1.5;// Suspension heght offset that will be setted by script. Can be changed.
double _SusStrenght=-1;// Suspension strenght that will be setted by script. Can be changed. Negative value enables auto calculation.
double _SusValueChangeRate=15;// Rate at wich script will adjuct height offset and strenght related to previous value. Mesured in game ticks.

// Autopilot settings.
string _AutopilotTimerName="Timer Block DAS Waypoint";// This timer block will be triggered at every waypoint.
double _AutopilotAccuracy=0.75;// How close to waypoint vehicle should be to consider it's reached. Higher-closer.
double _AutopilotWait=5;// Wait this time in sec when waypoint reached.
double _AutopilotSpeedLimitKMP=60;// Will drive at this speed.

//-------------------------------------------------------------------
// Script stuff. Modifying anything below will void your warranty.
//-------------------------------------------------------------------
enum HandbrakeMode : byte {Semi,Auto,Off,END_OF_ENUM}
enum AckermannFocalPointRef : byte {CoM,RC,BSphere}

class RuntimeProfiler
{
Program Parent;
double RunTimeAvrEMA;
double EMA_A;
int CycleNum;
int Counter;
StringBuilder Str;
IMyTextSurface MyLCD;
IEnumerator&lt;bool&gt; StMachine;
public int SkipCycles;
public string Caption;
public string Memo;
public RuntimeProfiler(Program parent,int skipCycles=0,int skipOffset=0,double emaA=0.003)
{
Parent=parent;
SkipCycles=skipCycles;
CycleNum=skipOffset;
EMA_A=emaA;
Str=new StringBuilder();
if(Parent.Me.CustomData=="")
MyLCD=(Parent.Me as IMyTextSurfaceProvider).GetSurface(0);
StMachine=UpdateIterator();
}
public void Update()
{
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
{
RunTimeAvrEMA=EMA_A*Parent.Runtime.LastRunTimeMs+(1-EMA_A)*RunTimeAvrEMA;
yield return true;
}
CycleNum=0;
Str.Clear();
Str.Append(Caption);
++Counter;
switch(Counter % 4)
{
case 0: Str.Append("--");break;
case 1: Str.Append("\\");break;
case 2: Str.Append(" |");break;
case 3: Str.Append("/");break;
}
Str.AppendFormat("\n{0}\n",Memo);
RunTimeAvrEMA=EMA_A*Parent.Runtime.LastRunTimeMs+(1-EMA_A)*RunTimeAvrEMA;
Str.AppendFormat("Instructions used: {0:G}/{1:G}\nAverage(EMA) run time: {2:F3} ms\nLast run time: {3:F3} ms\n{4}",
Parent.Runtime.CurrentInstructionCount,
Parent.Runtime.MaxInstructionCount,
RunTimeAvrEMA,
Parent.Runtime.LastRunTimeMs,
Counter % 2==0 ? "_" : "");
Parent.Echo(Str.ToString());
MyLCD?.WriteText(Str);
}
}

class PID
{
public double Kp {get;set;}
public double Ki {get;set;}
public double Kd {get;set;}
public double Signal {get;set;}
double ValuePrev;
double Integral;
double TimePrev;
public PID(double kp=1,double ki=1,double kd=1)
{
Kp=kp;
Ki=ki;
Kd=kd;
}
public void Reset()
{
ValuePrev=0;
Integral=0;
TimePrev=0;
Signal=0;
}
public double GetSignal(double value,double time=0)
{
if(Ki!=0)
Integral+=value*0.001;
double dt=time==0 ? 1 : time-TimePrev;
Signal=Kp*value+Ki*Integral*dt+Kd*(value-ValuePrev)/dt;
ValuePrev=value;
TimePrev=time;
return Signal;
}
}

class Utils
{
static public bool IsIgnore(IMyTerminalBlock block)
{
return block.CustomData.Equals("DAS_IGNORE",StringComparison.OrdinalIgnoreCase);
}
}

class StringQueue
{
List&lt;string&gt; StringsList;
StringBuilder String;
public int MaxCount {get;set;}
public StringQueue(int maxCount=0)
{
StringsList=new List&lt;string&gt;();
String=new StringBuilder();
MaxCount=maxCount;
}
public void Append(string str)
{
StringsList.Add(str);
if(MaxCount&gt;0&amp;&amp;StringsList.Count&gt;MaxCount)
StringsList.RemoveAt(0);
}
public void Remove(int count=1)
{
StringsList.RemoveRange(0,Math.Min(StringsList.Count,count));
}
public StringBuilder GetString()
{
String.Clear();
foreach(var item in StringsList)
String.AppendLine(item);
return String;
}
}

class BaseClass
{
protected Program Parent;
public IMyRemoteControl RC;
public bool Ready {get {return RC!=null;}}
public BaseClass(Program parent) {Parent=parent;}
public IMyRemoteControl ForceDetectRemoteControl()
{
RC=null;
List&lt;IMyRemoteControl&gt; remcomarr=new List&lt;IMyRemoteControl&gt;();
Parent.GridTerminalSystem.GetBlocksOfType(remcomarr,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
if(remcomarr.Count&gt;0)
RC=remcomarr[0];
return RC;
}
}

interface IInputData
{
float WS {get;}
float AD {get;}
float CSpacebar {get;}
float QE {get;}
bool Ready {get;}
bool Manning {get;}
}
class UserInputWatcher : IInputData
{
Program Parent;
List&lt;IMyShipController&gt; Controllers;
int CycleNum;
int Indx;
IEnumerator&lt;bool&gt; StMachine;

public float WS {get;set;}
public float AD {get;set;}
public float CSpacebar {get;set;}
public float QE {get;set;}
public bool Ready {get;set;}
public bool Manning {get;set;}
public int SkipCycles;

public UserInputWatcher(Program parent,int skipCycles=0,int skipOffset=0)
{
Parent=parent;
SkipCycles=skipCycles;
CycleNum=skipOffset;
Controllers=new List&lt;IMyShipController&gt;();
StMachine=UpdateIterator();
}
public void DetectFuncBlocks()
{
Controllers.Clear();
Parent.GridTerminalSystem.GetBlocksOfType(Controllers,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
Ready=Controllers.Count&gt;0;
Indx=0;
}
public void Reset()
{
WS=AD=CSpacebar=QE=0;
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CycleNum=0;
Manning=false;
Vector3 input=Vector3.Zero;
QE=0;
for(int i=0;i&lt;Controllers.Count;++i)
{
if(Controllers[Indx].IsUnderControl)
{
input=Controllers[Indx].MoveIndicator;
QE=Controllers[Indx].RollIndicator;
Manning=true;
break;
}
Indx=(Indx+1) % Controllers.Count;
}
WS=input.Z;
AD=input.X;
CSpacebar=input.Y;
}
}
class AutopilotDriver : BaseClass,IInputData
{
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
bool EnableState;
string TimerName;
IMyTimerBlock Timer;

public enum EDriveMode : byte {OneWay,Patrol,Cicrle,END_OF_ENUM}

public int SkipCycles;
public int WaypointIndx;
public int WaypointSelector=1;
public float WS {get;set;}
public float AD {get;set;}
public float CSpacebar {get;set;}
public float QE {get;set;}
public bool Manning {get;set;}
public bool Busy {get;set;}
public MyWaypointInfo CurrentWaypoint {get;set;}
public MyWaypointInfo FirstWaypoint {get;set;}
public MyWaypointInfo LastWaypoint {get;set;}
public double Time {get;set;}
public EDriveMode DriveMode;
public bool Enabled;
public double dT=0.016;
public double Accuracy;
public double WaitTimeSec;

public AutopilotDriver(Program parent,string timerName,int skipCycles=0,int skipOffset=0) : base(parent)
{
TimerName=timerName;
SkipCycles=skipCycles;
CycleNum=skipOffset;
StMachine=UpdateIterator();
}
public void ResetWaypointIndex(bool reset=true)
{
if(reset)
{
WaypointIndx=0;
WaypointSelector=1;
}
}
public void InverseRoute()
{
List&lt;MyWaypointInfo&gt; waypoints=new List&lt;MyWaypointInfo&gt;();
RC.GetWaypointInfo(waypoints);
RC.ClearWaypoints();
for(int i=waypoints.Count-1;i&gt;=0;i--)
RC.AddWaypoint(waypoints[i]);
if(WaypointIndx&gt;0)
WaypointIndx=waypoints.Count-WaypointIndx;
StMachine=UpdateIterator();
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
Timer=Parent.GridTerminalSystem.GetBlockWithName(TimerName) as IMyTimerBlock;
}
public void Update()
{
if(Ready)
{
if(Enabled)
{
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
else if(EnableState)
{
Manning=Busy=false;
WS=AD=0;
Time=0;
StMachine=UpdateIterator();
}
EnableState=Enabled;
}
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
List&lt;MyWaypointInfo&gt; waypoints=new List&lt;MyWaypointInfo&gt;();
RC.GetWaypointInfo(waypoints);
if(waypoints.Count==0) yield return false;
FirstWaypoint=waypoints[0];
LastWaypoint=waypoints[waypoints.Count-1];
Manning=true;
WS=AD=0;
Busy=true;
WaypointIndx=MathHelper.Clamp(WaypointIndx,0,waypoints.Count-1);
Time=0;
while(Busy)
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
{
Time+=dT;
yield return true;
}
CycleNum=0;
CurrentWaypoint=waypoints[WaypointIndx];
Vector3D targetVector=CurrentWaypoint.Coords-RC.CubeGrid.WorldVolume.Center;
double boundSphereRadi=RC.CubeGrid.WorldVolume.Radius;
double temp=boundSphereRadi/Accuracy;
if(targetVector.LengthSquared()&gt;temp*temp)
{
Time=0;
RC.HandBrake=false;
float dir=(float)RC.WorldMatrix.Backward.Dot(targetVector)+0.3f;
WS=MathHelper.Clamp(dir+(dir&gt;0 ? 0.1f : -0.1f),-1,1);
AD=(float)MathHelper.Clamp(RC.WorldMatrix.Right.Dot(Vector3D.Normalize(targetVector))*Math.Sign(-WS)*2,-1,1);
yield return true;
}
else
{
RC.HandBrake=WaitTimeSec&gt;0;
Time+=dT;
WS=AD=0;
Timer?.Trigger();
if(Time&lt;WaitTimeSec)
yield return true;
else
{
Time=0;
WaypointIndx+=WaypointSelector;
if(WaypointIndx&gt;=waypoints.Count)
{
switch(DriveMode)
{
case EDriveMode.OneWay:
Busy=false;
break;
case EDriveMode.Patrol:
WaypointSelector=-1;
if(waypoints.Count&gt;1)
WaypointIndx-=2;
else
Busy=false;
break;
case EDriveMode.Cicrle:
WaypointIndx=0;
if(waypoints.Count&lt;2)
Busy=false;
break;
}
}
else if(WaypointIndx&lt;0)
{
WaypointSelector=1;
WaypointIndx=0;
}
}
}
}
Time=0;
Manning=false;
RC.HandBrake=true;
}
}
class CruiseControlUnit : BaseClass,IInputData
{
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
bool EnableState;
IInputData UserInput;
GridDynamicsWatcher Dynamics;
OrientationComputer Orientation;
float HeadingYaw;
float VelocitySign;

public int SkipCycles;
public float WS {get;set;}
public float AD {get;set;}
public float CSpacebar {get;set;}
public float QE {get;set;}
public bool Manning {get;set;}
public bool Busy {get;set;}
public double SpeedKPH {get;set;}
public bool Enabled;

public CruiseControlUnit(Program parent,IInputData userInput,GridDynamicsWatcher dynamics,OrientationComputer orientation,
int skipCycles=0,int skipOffset=0) : base(parent)
{
UserInput=userInput;
Dynamics=dynamics;
Orientation=orientation;
SkipCycles=skipCycles;
CycleNum=skipOffset;
StMachine=UpdateIterator();
}
public void Update()
{
if(Ready)
{
if(Enabled)
{
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
else if(EnableState)
{
Busy=false;
Manning=false;
WS=AD=0;
StMachine=UpdateIterator();
}
EnableState=Enabled;
}
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
Manning=true;
SpeedKPH=Dynamics.Velocity.LateralAbs*3.6/0.9;
VelocitySign=WS=Math.Sign(Dynamics.Velocity.Backward);
HeadingYaw=(float)Orientation.Yaw;
AD=0;
Busy=true;
while(Busy)
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CSpacebar=0;
if(UserInput.WS!=0||UserInput.CSpacebar&gt;0)
{
SpeedKPH=Dynamics.Velocity.LateralAbs*3.6/0.9;
VelocitySign=Math.Sign(Dynamics.Velocity.Backward);
WS=UserInput.WS!=0 ? Math.Sign(UserInput.WS)+UserInput.WS : VelocitySign;
CSpacebar=UserInput.CSpacebar;
}
else
WS=VelocitySign;
if(UserInput.AD!=0)
{
HeadingYaw=(float)Orientation.Yaw;
AD=UserInput.AD;
}
else
AD=-VelocitySign*MathHelper.Clamp(MathHelper.WrapAngle(HeadingYaw-(float)Orientation.Yaw)*5f,-1,1);
if(Dynamics.Velocity.Scalar&lt;1)
Busy=false;
else
yield return true;
}
Manning=false;
RC.HandBrake=true;
}
}

class GridDynamicsWatcher : BaseClass
{
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;

public class VelocitiesCollection
{
public Vector3D Vector {get;set;}
public double Forward {get;set;}
public double Right {get;set;}
public double Down {get;set;}
public double Backward {get {return -Forward;}}
public double Left {get {return -Right;}}
public double Up {get {return -Down;}}
public double SideAbs {get;set;}
public double LateralAbs {get;set;}
public double VerticalAbs {get;set;}
public double Scalar {get;set;}
public double NaturalPitchDegree;
public VelocitiesCollection() {}
public void Update(IMyShipController rc)
{
Vector=rc.GetShipVelocities().LinearVelocity;
Scalar=Vector.Length();
Forward=Vector.Dot(rc.WorldMatrix.Forward);
Right=Vector.Dot(rc.WorldMatrix.Right);
Down=Vector.Dot(rc.WorldMatrix.Down);
if(NaturalPitchDegree!=0)
{
double pScalar=new Vector2D(Forward,Down).Length();
Down-=Math.Sin(MathHelperD.ToRadians(NaturalPitchDegree))*pScalar*Math.Sign(Forward);
Forward+=Math.Abs(Math.Sin(MathHelperD.ToRadians(NaturalPitchDegree)))*pScalar;
}
LateralAbs=Math.Abs(Forward);
VerticalAbs=Math.Abs(Down);
SideAbs=Math.Abs(Right);
}
public void Reset()
{
Forward=Right=Down=SideAbs=LateralAbs=VerticalAbs=Scalar=0;
Vector=Vector3D.Zero;
}
}
public class AccelerationCollection
{
Vector3D VelocityVPrev;
double VelocitySPrev;
public Vector3D VectorMoment {get;set;}
public double AvrEMA {get;set;}
public double Moment {get;set;}
public double EMA_A;
public AccelerationCollection(double emaA=0.2)
{
EMA_A=emaA;
}
public void Update(VelocitiesCollection velocity,double dT)
{
VectorMoment=(velocity.Vector-VelocityVPrev)/dT;
Moment=(velocity.Scalar-VelocitySPrev)/dT;
AvrEMA=EMA_A*Moment+(1-EMA_A)*AvrEMA;
VelocityVPrev=velocity.Vector;
VelocitySPrev=velocity.Scalar;
}
public void Reset()
{
AvrEMA=Moment=0;
VectorMoment=Vector3D.Zero;
}
}

public int SkipCycles;
public VelocitiesCollection Velocity {get;set;}
public AccelerationCollection Acceleration {get;set;}
public double NaturalPitchDegree {get {return Velocity.NaturalPitchDegree;} set {Velocity.NaturalPitchDegree=value;}}
public double dT=0.016;

public GridDynamicsWatcher(Program parent,int skipCycles=0,int skipOffset=0)
: base(parent)
{
SkipCycles=skipCycles;
CycleNum=skipOffset;
Velocity=new VelocitiesCollection();
Acceleration=new AccelerationCollection();
StMachine=UpdateIterator();
}
public void Reset()
{
Velocity.Reset();
Acceleration.Reset();
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
double time=dT;
for(;CycleNum&lt;SkipCycles;++CycleNum)
{
time+=dT;
yield return true;
}
CycleNum=0;
Velocity.Update(RC);
Acceleration.Update(Velocity,time);
}
}

class GridMassWatcher : BaseClass
{
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
bool _BaseMassChanged;
bool _PhysicalMassChanged;
MyShipMass MassesPrev;
float[] ChangeIgnorArr;

public int SkipCycles;
public MyShipMass Masses {get;set;}
public bool BaseMassChanged
{
get
{
bool temp=_BaseMassChanged;
_BaseMassChanged=false;
return temp;
}
}
public bool PhysicalMassChanged
{
get
{
bool temp=_PhysicalMassChanged;
_PhysicalMassChanged=false;
return temp;
}
}

public GridMassWatcher(Program parent,int skipCycles=0,int skipOffset=0) : base(parent)
{
SkipCycles=skipCycles;
CycleNum=skipOffset;
StMachine=UpdateIterator();
}
public void InitMasses()
{
MassesPrev=RC.CalculateShipMass();
}
public void SetIgnorArray(float[] array)
{
ChangeIgnorArr=array;
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CycleNum=0;
Masses=RC.CalculateShipMass();
double temp;
temp=Math.Abs(MassesPrev.BaseMass-Masses.BaseMass);
if(temp==0)
_BaseMassChanged=false;
else
{
_BaseMassChanged=true;
if(ChangeIgnorArr!=null)
foreach(var d in ChangeIgnorArr)
if(temp==d)
{
_BaseMassChanged=false;
break;
}
}

temp=Math.Abs(MassesPrev.PhysicalMass-Masses.PhysicalMass);
if(temp==0)
_PhysicalMassChanged=false;
else
{
_PhysicalMassChanged=true;
if(ChangeIgnorArr!=null)
foreach(var d in ChangeIgnorArr)
if(temp==d)
{
_PhysicalMassChanged=false;
break;
}
}

MassesPrev=Masses;
}
}

class GravityWatcher : BaseClass
{
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
double MagnitudePrev;
bool _MagnitudeChanged;

public int SkipCycles;
public Vector3 Direction {get;set;}
public double Magnitude {get;set;}
public bool MagnitudeChanged
{
get
{
bool temp=_MagnitudeChanged;
_MagnitudeChanged=false;
return temp;
}
}
public bool ArtificialStongerNatural {get;set;}

public GravityWatcher(Program parent,int skipCycles=0,int skipOffset=0)
: base(parent)
{
SkipCycles=skipCycles;
CycleNum=skipOffset;
StMachine=UpdateIterator();
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CycleNum=0;
ArtificialStongerNatural=RC.GetNaturalGravity().LengthSquared()&lt;RC.GetArtificialGravity().LengthSquared();
Direction=RC.GetTotalGravity();
Magnitude=Direction.Length();
_MagnitudeChanged=Magnitude!=MagnitudePrev;
MagnitudePrev=Magnitude;
}
}

class OrientationComputer : BaseClass
{
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;

public int SkipCycles;
public double Roll {get;set;}
public double Yaw {get;set;}
public double Pitch {get;set;}
public Vector3D RollYawPitch {get;set;}
public OrientationComputer(Program parent,int skipCycles=0,int skipOffset=0)
: base(parent)
{
SkipCycles=skipCycles;
CycleNum=skipOffset;
}
public void Update(Vector3D gravity,bool skipYaw=false)
{
if(Ready)
{
if(StMachine==null)
StMachine=UpdateIterator(gravity,skipYaw);
if(!StMachine.MoveNext())
StMachine=null;
}
}
IEnumerator&lt;bool&gt; UpdateIterator(Vector3D gravity,bool skipYaw)
{
Vector3D fow=RC.WorldMatrix.Forward;
Vector3D up=RC.WorldMatrix.Up;
Vector3D left=RC.WorldMatrix.Left;
Vector3D result=Vector3D.Zero;
int temp=Math.Max(SkipCycles-(skipYaw ? 1 : 2),0);
int temp2=SkipCycles-temp;
for(;CycleNum&lt;temp;++CycleNum)
yield return true;
CycleNum=0;

if(!Vector3D.IsZero(gravity))
{
gravity.Normalize();
result.Z=-Math.Asin(MathHelperD.Clamp(fow.Dot(gravity),-1.0,1.0));
if(temp2&gt;1) yield return true;

gravity.Normalize();
result.X=Math.Asin(MathHelperD.Clamp(-gravity.Dot(left),-1.0,1.0));
if(gravity.Dot(up)&gt;0)
result.X=Math.Sign(result.X)*(Math.PI-Math.Abs(result.X));
if(temp2&gt;0) yield return true;

if(!skipYaw)
{
gravity.Normalize();
Vector3D gnNorth=Vector3D.Normalize(Vector3D.Reject(-Vector3D.UnitY,gravity));
Vector3D gnForwad=Vector3D.Normalize(Vector3D.Reject(fow,gravity));
result.Y=Math.Acos(MathHelperD.Clamp(gnForwad.Dot(gnNorth),-1.0,1.0));
if(Math.Abs(result.X)&lt;MathHelperD.PiOver2)
{
if(left.Dot(gnNorth)&lt;0)
result.Y=-result.Y;
}
else if(left.Dot(gnNorth)&gt;0)
result.Y=-result.Y;
}
}
Roll=result.X;
Yaw=result.Y;
Pitch=result.Z;
RollYawPitch=new Vector3D(Roll,Yaw,Pitch);
}
}

class CameraScheduler : BaseClass
{
class CameraWrapper
{
public IMyCameraBlock Camera {get;set;}
public Vector3D LocalPosition {get;set;}
public CameraWrapper(IMyCameraBlock camera,IMyShipController anchor)
{
Camera=camera;
Vector3D temp1,temp2;
temp2=Camera.GetPosition()-anchor.CubeGrid.WorldVolume.Center;
temp1.X=anchor.WorldMatrix.Right.Dot(temp2);
temp1.Y=anchor.WorldMatrix.Up.Dot(temp2);
temp1.Z=anchor.WorldMatrix.Backward.Dot(temp2);
LocalPosition=temp1;
}
}
List&lt;CameraWrapper&gt; Cameras;
GridDynamicsWatcher Dynamics;
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
double RaycastDistance=100;
double Time;
int CameraIndex;
int Odd;
Vector3D SurfaceHitPosPrev;

new public bool Ready {get {return (this as BaseClass).Ready&amp;&amp;Cameras.Count&gt;0;}}
public int SkipCycles;
public double CalcSurfaceAfter;
public double dT=0.016;
public Vector3D SurfaceTilt {get;set;}
public Vector3D SurfaceBank {get;set;}
public MyDetectedEntityType SurfaceType {get;set;}
public double Altitude {get;set;}
public double RaycastDistanceUsed {get;set;}
public int DataAge {get;set;}

public CameraScheduler(Program parent,GridDynamicsWatcher dynamics,int skipCycles=0,int skipOffset=0)
: base(parent)
{
SkipCycles=skipCycles;
CycleNum=skipOffset;
Dynamics=dynamics;
Cameras=new List&lt;CameraWrapper&gt;();
StMachine=UpdateIterator();
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
Cameras.Clear();
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
if(RC!=null)
{
List&lt;IMyCameraBlock&gt; allCameras=new List&lt;IMyCameraBlock&gt;();
Parent.GridTerminalSystem.GetBlocksOfType(allCameras,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
foreach(var camera in allCameras)
{
if(RC.Orientation.TransformDirectionInverse(camera.Orientation.Forward)==Base6Directions.Direction.Down)
{
camera.EnableRaycast=true;
CameraWrapper newCamera=new CameraWrapper(camera,RC);
Cameras.Add(newCamera);
}
}
}
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
{
++DataAge;
Time+=dT;
yield return true;
}
CycleNum=0;

++DataAge;
Time+=dT;
Odd=(Odd+1) % 2;
Vector3D ScanDirection=Vector3D.Lerp(RC.WorldMatrix.Down,RC.WorldMatrix.Forward,0.2+Odd/5.0);
// calc raycast direction as derivative from velocity and gravity vectors,but in 44.9 deg cone
if(Dynamics.Velocity.Scalar&gt;0.5)
{
double Y=Math.Acos(RC.WorldMatrix.Down.Dot(Vector3D.Normalize(Dynamics.Velocity.Vector)));
if(Y&lt;0.783652834148)
ScanDirection=Dynamics.Velocity.Vector;
else if(Y&lt;2.3561944902) // from 44.9 to 135 degree
{
double CC=Math.Sin(Y)/Math.Sin((Math.PI-Y)/2.0);
double C1=0.7070944397373547/Math.Sin(0.78538071010493+Y/2.0);// sin(PI/4)/sin(PI/4+Y/2)
ScanDirection=Vector3D.Lerp(RC.WorldMatrix.Down,Vector3D.Normalize(Dynamics.Velocity.Vector),C1/CC);
}
}
// raycast in ScanDirection vector and calc SurfaceTilt
MyDetectedEntityInfo hit=new MyDetectedEntityInfo();
SurfaceTilt=Vector3D.Zero;
SurfaceType=MyDetectedEntityType.None;
hit=TryRaycast(RaycastDistance,ScanDirection);
if(!hit.IsEmpty())
{
Vector3D rayCastDistance=hit.HitPosition.Value-Cameras[CameraIndex].Camera.GetPosition();
rayCastDistance=hit.HitPosition.Value-(RC.CubeGrid.WorldVolume.Center+RC.WorldMatrix.Down*RC.CubeGrid.WorldVolume.Radius);
RaycastDistance=rayCastDistance.Length()*1.05+5;
SurfaceType=hit.Type;
Altitude=RC.WorldMatrix.Down.Dot(rayCastDistance);
DataAge=0;

if(Altitude&lt;=CalcSurfaceAfter&amp;&amp;!Vector3D.IsZero(SurfaceHitPosPrev))
SurfaceTilt=hit.HitPosition.Value-SurfaceHitPosPrev;
SurfaceHitPosPrev=hit.HitPosition.Value;
}
else
{
RaycastDistance=Math.Min(RaycastDistance+25,1000.0);
SurfaceHitPosPrev=Vector3D.Zero;
}
yield return true;

++DataAge;
Time+=dT;
// raycast in side-to-side vectors and calc SurfaceBank
SurfaceBank=Vector3D.Zero;
if(Altitude&lt;=CalcSurfaceAfter&amp;&amp;!hit.IsEmpty())
{
Vector3D perpendicular=Vector3D.Normalize(ScanDirection.Cross(RC.WorldMatrix.Down));
Vector3D perpendicularDiagonal;
if(perpendicular.IsValid())
perpendicularDiagonal=Vector3D.Lerp(RC.WorldMatrix.Down,perpendicular,0.15);
else
perpendicularDiagonal=Vector3D.Lerp(RC.WorldMatrix.Down,RC.WorldMatrix.Left,0.15);
hit=TryRaycast(RaycastDistance,perpendicularDiagonal);
if(!hit.IsEmpty())
{
Vector3D currentHit=hit.HitPosition.Value;
if(perpendicular.IsValid())
perpendicularDiagonal=Vector3D.Lerp(RC.WorldMatrix.Down,-perpendicular,0.15);
else
perpendicularDiagonal=Vector3D.Lerp(RC.WorldMatrix.Down,RC.WorldMatrix.Right,0.15);
hit=TryRaycast(RaycastDistance,perpendicularDiagonal);
if(!hit.IsEmpty())
SurfaceBank=hit.HitPosition.Value-currentHit;
}
}

if(Time&gt;=1.0)
{
RaycastDistanceUsed=0;
Time=0;
}
}
MyDetectedEntityInfo TryRaycast(double distance,Vector3D worldDirection)
{
MyDetectedEntityInfo result=new MyDetectedEntityInfo();
if(RaycastDistanceUsed+distance&lt;=2000)
{
double minAngle=double.MaxValue;
CameraIndex=-1;
Vector3D localDirection=-Vector3D.Normalize(Vector3D.TransformNormal(worldDirection,MatrixD.Transpose(RC.WorldMatrix)));
for(int i=0;i&lt;Cameras.Count;++i)
{
double temp=localDirection.Dot(Cameras[i].LocalPosition);
if(temp&lt;minAngle&amp;&amp;Cameras[i].Camera.IsWorking&amp;&amp;Cameras[i].Camera.CanScan(distance))
{
minAngle=temp;
CameraIndex=i;
}
}
if(CameraIndex&gt;=0)
{
RaycastDistanceUsed+=distance;
localDirection=Vector3D.Normalize(Vector3D.TransformNormal(worldDirection,MatrixD.Transpose(Cameras[CameraIndex].Camera.WorldMatrix)));
result=Cameras[CameraIndex].Camera.Raycast(distance,localDirection);

}
}
return result;
}
}

class TractionControlSystem : BaseClass
{
class SuspensionWrapper
{
public IMyMotorSuspension Obj {get;}
public Base6Directions.Direction OrientationInVehicle {get;}
public Vector3D WheelPositionAgainstCoM {get;set;}
public Vector3D WheelPositionAgainstRef {get;set;}
public double WheelPositionAgainstVelocity {get;set;}
public double HeightOffsetMin {get;}
public double HeightOffsetMax {get;}
public double HeightOffsetRange {get;}
public double WheelRadius {get;}
public double PropulsionSign {get;}
public bool IsSubgrid {get;}
public double LeftMaxSteerAngle;
public double RightMaxSteerAngle;
public double TurnRadiusCurrent;
public double TurnRadiusLeftMin;
public double TurnRadiusRightMin;
public double WeightDistributionRatio;
public double BrakeFrictionDistributionRatio;
public double SpeedLimit {get {return Obj.GetValueFloat("Speed Limit");} set {Obj.SetValueFloat("Speed Limit",(float)value);}}
public double PropulsionOverride {get {return Obj.GetValueFloat("Propulsion override");} set {Obj.SetValueFloat("Propulsion override",(float)value);}}
public double SteerOverrie {get {return Obj.GetValueFloat("Steer override");} set {Obj.SetValueFloat("Steer override",(float)value);}}
public double Power {get {return Obj.Power;} set {Obj.Power=(float)value;}}
public double Friction {get {return Obj.Friction;} set {Obj.Friction=(float)value;}}
public double Strength {get {return Obj.Strength;} set {Obj.Strength=(float)value;}}
public double Height {get {return Obj.Height;} set {Obj.Height=(float)value;}}
public double MaxSteerAngle {get {return Obj.MaxSteerAngle;} set {Obj.MaxSteerAngle=(float)value;}}
public SuspensionWrapper(IMyMotorSuspension suspension,Base6Directions.Direction orientation,bool subgrid=false)
{
Obj=suspension;
OrientationInVehicle=orientation;
IsSubgrid=subgrid;
if(orientation==Base6Directions.Direction.Left)
PropulsionSign=-1;
else if(orientation==Base6Directions.Direction.Right)
PropulsionSign=1;
HeightOffsetMin=suspension.GetMinimum&lt;float&gt;("Height");
HeightOffsetMax=suspension.GetMaximum&lt;float&gt;("Height");
HeightOffsetRange=HeightOffsetMax-HeightOffsetMin;
if(suspension.CubeGrid.GridSizeEnum==MyCubeSize.Small)
{
if(suspension.BlockDefinition.SubtypeName.Contains("5x5")) WheelRadius=1.25;
else if(suspension.BlockDefinition.SubtypeName.Contains("3x3")) WheelRadius=0.75;
else if(suspension.BlockDefinition.SubtypeName.Contains("2x2")) WheelRadius=0.5;// modded
else if(suspension.BlockDefinition.SubtypeName.Contains("1x1")) WheelRadius=0.25;
else // some other modded wheels
WheelRadius=suspension.IsAttached ? suspension.Top.WorldVolume.Radius*0.79/MathHelper.Sqrt2 : 0;
}
else
{
if(suspension.BlockDefinition.SubtypeName.Contains("5x5")) WheelRadius=6.25;
else if(suspension.BlockDefinition.SubtypeName.Contains("3x3")) WheelRadius=3.75;
else if(suspension.BlockDefinition.SubtypeName.Contains("2x2")) WheelRadius=2.5;// modded
else if(suspension.BlockDefinition.SubtypeName.Contains("1x1")) WheelRadius=1.25;
else // some other modded wheels
WheelRadius=suspension.IsAttached ? suspension.Top.WorldVolume.Radius*0.79/MathHelper.Sqrt2 : 0;
}
}
public Vector3 GetVelocityAtPoint(IMyShipController anchor)
{
Vector3 value=Vector3D.Zero;
if(Obj.IsAttached)
{
Vector3 v=Obj.Top.GetPosition()-anchor.CenterOfMass;
value=anchor.GetShipVelocities().LinearVelocity+anchor.GetShipVelocities().AngularVelocity.Cross(v);
}
return value;
}
public bool AddTopPart()
{
Obj.ApplyAction("Add Top Part");
return Obj.IsAttached;
}
public void UpdateLocalPosition(IMyShipController anchor,Vector3D focalPointRef)
{
if(Obj.IsAttached)
{
Vector3D temp1,temp2;
temp2=Obj.Top.GetPosition()-anchor.CenterOfMass;
temp1.X=anchor.WorldMatrix.Right.Dot(temp2);
temp1.Y=anchor.WorldMatrix.Up.Dot(temp2);
temp1.Z=anchor.WorldMatrix.Backward.Dot(temp2);
WheelPositionAgainstCoM=temp1;
temp2=Obj.Top.GetPosition()-focalPointRef;
temp1.X=anchor.WorldMatrix.Right.Dot(temp2);
temp1.Y=anchor.WorldMatrix.Up.Dot(temp2);
temp1.Z=anchor.WorldMatrix.Backward.Dot(temp2);
WheelPositionAgainstRef=temp1;
}
else
WheelPositionAgainstRef=WheelPositionAgainstCoM=Vector3D.Zero;
}
public void UpdatePositionVelocity(Vector3D velocity)
{
if(Obj.IsAttached)
WheelPositionAgainstVelocity=velocity.Dot(WheelPositionAgainstCoM);
else
WheelPositionAgainstVelocity=0;
}
}
List&lt;SuspensionWrapper&gt; WheelSuspensions;
List&lt;IMyShipController&gt; SlaveShipControllers;
GridDynamicsWatcher Dynamics;
GravityWatcher Gravity;
OrientationComputer Orientation;
CameraScheduler Camera;
IInputData UserInput;
int FCycleNum;
int TCycleNum;
int HCycleNum;
int StrCycleNum;
int SpdCycleNum;
int SteCycleNum;
int BrCycleNum;
int WlAdrCycleNum;
IEnumerator&lt;bool&gt; FStMachine;
IEnumerator&lt;bool&gt; TStMachine;
IEnumerator&lt;bool&gt; HStMachine;
IEnumerator&lt;bool&gt; StrStMachine;
IEnumerator&lt;bool&gt; SpdStMachine;
IEnumerator&lt;bool&gt; SteStMachine;
IEnumerator&lt;bool&gt; BrStMachine;
IEnumerator&lt;bool&gt; WlAdrStMachine;
double CurrentTorque;
double PropulsionAmp=1;
double GridSprungWeight;
double StrenghtDelta=2;
double HeightOffsetDelta=0.1;
double _Strenght;
double _HeightOffset;
bool BusyWithHeight;
bool BusyWithStrenght;
bool EnableState;
string SubgridWheelsGroupName;

public bool Enabled;
new public bool Ready
{
get
{
return (this as BaseClass).Ready
&amp;&amp; UserInput.Ready&amp;&amp;Dynamics.Ready&amp;&amp;Gravity.Ready&amp;&amp;Orientation.Ready
&amp;&amp; WheelSuspensions.Count&gt;0;
}
}
public bool Busy {get {return BusyWithHeight||BusyWithStrenght;}}
public bool UseAdaptiveSteering;
public bool UseAckermannSteering;
public bool UseDASAirShock;
public bool UseHillDescentControl;
public bool ForceFullOverride;
public int FrictionSkipCycles;
public int TorqueSkipCycles;// 'power' property.
public int HeightOfstSkipCycles;
public int StrenghtSkipCycles;
public int SpeedLimitSkipCycles;
public int SteerSkipCycles;
public int BrakesSkipCycles;
public int WheelAddSkipCycles;
public double PowerLimit;
public double ForwardSpeedLimitKPH;
public double BackwardSpeedLimitKPH;
public double MaxForwardAcceleration;
public double MaxBackwardAcceleration;
public double MaxSteerAngleDegree;
public double Strenght
{
get {return _Strenght;}
set
{
StrenghtDelta=Math.Abs(value-_Strenght);
_Strenght=value;
}
}
public double HeightOffset
{
get {return _HeightOffset;}
set
{
if(value&gt;=0)
HeightOffsetDelta=Math.Abs(value-_HeightOffset);
_HeightOffset=value;
}
}
public double ValueChangeRate;
public double VehicleTurnRadiusRight {get;private set;}
public double VehicleTurnRadiusLeft {get;private set;}
public double CoMToWheelsBaseAngle {get;private set;}
public AckermannFocalPointRef AckFocal;
public TractionControlSystem(Program parent,GridDynamicsWatcher dynamics,GravityWatcher gravity,
OrientationComputer orientation,CameraScheduler camera,string sbgrdWhlGrpNm="",
int fCycles=0,int fOffset=0,int tCycles=0,int tOffset=0,int hCycles=0,int hOffset=0,
int strCycles=0,int strOffset=0,int sCycles=0,int sOffset=0,int steCycles=0,int steOffset=0,
int bCycles=0,int bOffset=0,int wCycles=0,int wOffset=0) : base(parent)
{
Dynamics=dynamics;
Gravity=gravity;
Orientation=orientation;
Camera=camera;
SubgridWheelsGroupName=sbgrdWhlGrpNm;
FrictionSkipCycles=fCycles;
FCycleNum=fOffset;
TorqueSkipCycles=tCycles;
TCycleNum=tOffset;
HeightOfstSkipCycles=hCycles;
HCycleNum=hOffset;
StrenghtSkipCycles=strCycles;
StrCycleNum=strOffset;
SpeedLimitSkipCycles=sCycles;
SpdCycleNum=sOffset;
SteerSkipCycles=steCycles;
SteCycleNum=steOffset;
BrakesSkipCycles=bCycles;
BrCycleNum=bOffset;
WheelAddSkipCycles=wCycles;
WlAdrCycleNum=wOffset;
WheelSuspensions=new List&lt;SuspensionWrapper&gt;();
SlaveShipControllers=new List&lt;IMyShipController&gt;();
InitStateMachines();
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
WheelSuspensions.Clear();
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
if(RC!=null)
{
List&lt;IMyMotorSuspension&gt; allWheels=new List&lt;IMyMotorSuspension&gt;();
Parent.GridTerminalSystem.GetBlocksOfType(allWheels,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
foreach(var suspension in allWheels)
{
Base6Directions.Direction blockOrientation=RC.Orientation.TransformDirectionInverse(suspension.Orientation.Up);
if(blockOrientation==Base6Directions.Direction.Left||blockOrientation==Base6Directions.Direction.Right)
{
suspension.AirShockEnabled=!UseDASAirShock;
SuspensionWrapper newSuspensionData=new SuspensionWrapper(suspension,blockOrientation);
newSuspensionData.PropulsionOverride=0;
newSuspensionData.SteerOverrie=0;
WheelSuspensions.Add(newSuspensionData);
}
}

IMyBlockGroup subgridWheelsGroup=Parent.GridTerminalSystem.GetBlockGroupWithName(SubgridWheelsGroupName);
if(subgridWheelsGroup!=null)
{
SuspensionWrapper newSuspension;
List&lt;IMyCubeGrid&gt; wheeledSubgrids=new List&lt;IMyCubeGrid&gt;();
List&lt;IMyShipController&gt; slaveControllers=new List&lt;IMyShipController&gt;();
allWheels.Clear();
subgridWheelsGroup.GetBlocksOfType(allWheels);
foreach(var suspension in allWheels)
{
if(suspension.CubeGrid!=Parent.Me.CubeGrid)
{
if(suspension.WorldMatrix.Up.Dot(RC.WorldMatrix.Left)&gt;0.7)
{
suspension.AirShockEnabled=!UseDASAirShock;
newSuspension=new SuspensionWrapper(suspension,Base6Directions.Direction.Left,true);
WheelSuspensions.Add(newSuspension);
if(wheeledSubgrids.IndexOf(suspension.CubeGrid)==-1)
wheeledSubgrids.Add(suspension.CubeGrid);
}
else if(suspension.WorldMatrix.Up.Dot(RC.WorldMatrix.Right)&gt;0.7)
{
suspension.AirShockEnabled=!UseDASAirShock;
newSuspension=new SuspensionWrapper(suspension,Base6Directions.Direction.Right,true);
WheelSuspensions.Add(newSuspension);
if(wheeledSubgrids.IndexOf(suspension.CubeGrid)==-1)
wheeledSubgrids.Add(suspension.CubeGrid);
}
}
}
foreach(var grid in wheeledSubgrids)
{
slaveControllers.Clear();
Parent.GridTerminalSystem.GetBlocksOfType(slaveControllers,block =&gt; block.CubeGrid==grid&amp;&amp;!Utils.IsIgnore(block));
foreach(var controller in slaveControllers)
if(SlaveShipControllers.IndexOf(controller)==-1)
SlaveShipControllers.Add(controller);
}
}
UpdateSuspensionCofiguration();
}
}
public void UpdateSprungWeight(double gridPhysMass)
{
double unsprungMass=0;
foreach(var suspension in WheelSuspensions)
if(suspension.Obj.IsAttached)
unsprungMass+=suspension.Obj.Top.Mass;
GridSprungWeight=(gridPhysMass-unsprungMass)*Gravity.Magnitude;
}
public void UpdateSuspensionCofiguration()
{
double maxL=0;
double maxR=0;
double wheelFocus;
double rearHalfZ=double.MinValue;
double frontHalfZ=double.MaxValue;
double wheelsBaseZ;
double weightRearRatio=0;
double weightFrontRatio=0;
double weightsSum=0;
double comHeight=0;

VehicleTurnRadiusLeft=VehicleTurnRadiusRight=0;
foreach(var suspension in WheelSuspensions)
if(suspension.Obj.IsAttached)
{
switch(AckFocal)
{
case AckermannFocalPointRef.CoM:
suspension.UpdateLocalPosition(RC,RC.CenterOfMass);
break;
case AckermannFocalPointRef.RC:
suspension.UpdateLocalPosition(RC,RC.GetPosition());
break;
case AckermannFocalPointRef.BSphere:
suspension.UpdateLocalPosition(RC,RC.CubeGrid.WorldVolume.Center);
break;
}
if(Math.Sign(suspension.WheelPositionAgainstRef.Z)!=Math.Sign(suspension.WheelPositionAgainstCoM.Z))
suspension.Obj.InvertSteer=true;
else
suspension.Obj.InvertSteer=false;

comHeight=Math.Max(comHeight,-suspension.WheelPositionAgainstCoM.Y+suspension.WheelRadius
- Math.Max(_HeightOffset,suspension.HeightOffsetMin));
if(suspension.OrientationInVehicle==Base6Directions.Direction.Left)
maxL=Math.Max(maxL,-suspension.WheelPositionAgainstCoM.X);
else if(suspension.OrientationInVehicle==Base6Directions.Direction.Right)
maxR=Math.Max(maxR,suspension.WheelPositionAgainstCoM.X);

if(suspension.Obj.Steering)
{
wheelFocus=Math.Abs(suspension.WheelPositionAgainstRef.Z/Math.Tan(MathHelperD.ToRadians(MaxSteerAngleDegree)));
if(VehicleTurnRadiusLeft&gt;suspension.WheelPositionAgainstRef.X-wheelFocus)
VehicleTurnRadiusLeft=suspension.WheelPositionAgainstRef.X-wheelFocus;
if(VehicleTurnRadiusRight&lt;suspension.WheelPositionAgainstRef.X+wheelFocus)
VehicleTurnRadiusRight=suspension.WheelPositionAgainstRef.X+wheelFocus;
}
rearHalfZ=Math.Max(rearHalfZ,suspension.WheelPositionAgainstCoM.Z);
frontHalfZ=Math.Min(frontHalfZ,suspension.WheelPositionAgainstCoM.Z);
}
CoMToWheelsBaseAngle=Math.Atan(comHeight/Math.Min(maxL,maxR));
wheelsBaseZ=rearHalfZ-frontHalfZ;
weightRearRatio=Math.Abs(frontHalfZ/wheelsBaseZ);
weightFrontRatio=Math.Abs(rearHalfZ/wheelsBaseZ);
double frictionLowerLever=0.5*rearHalfZ/-frontHalfZ;
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.Steering)
{
double temp1=(VehicleTurnRadiusLeft-suspension.WheelPositionAgainstRef.X);
double temp2=(VehicleTurnRadiusRight-suspension.WheelPositionAgainstRef.X);
suspension.LeftMaxSteerAngle=Math.Abs(Math.Atan(suspension.WheelPositionAgainstRef.Z/temp1));
suspension.RightMaxSteerAngle=Math.Abs(Math.Atan(suspension.WheelPositionAgainstRef.Z/temp2));
suspension.TurnRadiusLeftMin=Math.Sqrt(suspension.WheelPositionAgainstRef.Z*suspension.WheelPositionAgainstRef.Z+temp1*temp1);
suspension.TurnRadiusRightMin=Math.Sqrt(suspension.WheelPositionAgainstRef.Z*suspension.WheelPositionAgainstRef.Z+temp2*temp2);
}
else
{
suspension.LeftMaxSteerAngle=suspension.RightMaxSteerAngle=0;
suspension.TurnRadiusCurrent=suspension.TurnRadiusLeftMin=suspension.TurnRadiusRightMin=1;
}
if(wheelsBaseZ&gt;0.1)
{
if(suspension.WheelPositionAgainstCoM.Z&gt;=0)
suspension.WeightDistributionRatio=Math.Abs((suspension.WheelPositionAgainstCoM.Z-frontHalfZ)/wheelsBaseZ*weightRearRatio);
else
suspension.WeightDistributionRatio=Math.Abs((rearHalfZ-suspension.WheelPositionAgainstCoM.Z)/wheelsBaseZ*weightFrontRatio);

suspension.BrakeFrictionDistributionRatio=frictionLowerLever+(1-frictionLowerLever)*(suspension.WheelPositionAgainstCoM.Z-frontHalfZ)/wheelsBaseZ;
}
else
{
suspension.WeightDistributionRatio=1;
suspension.BrakeFrictionDistributionRatio=1;
}
weightsSum+=suspension.WeightDistributionRatio;
}
foreach(var suspension in WheelSuspensions)
{
suspension.WeightDistributionRatio/=weightsSum;
}
}
public void ReleaseControl()
{
foreach(var suspension in WheelSuspensions)
{
suspension.Power=100*PowerLimit;
suspension.Friction=100;
suspension.SpeedLimit=ForwardSpeedLimitKPH;
if(UseAckermannSteering)
suspension.MaxSteerAngle=MathHelperD.ToRadians(MaxSteerAngleDegree);
suspension.PropulsionOverride=0;
suspension.SteerOverrie=0;
suspension.Obj.AirShockEnabled=true;
}
}
public void SetInputSource(IInputData source)
{
UserInput=source;
}
public void Update()
{
if(Ready)
{
if(Enabled)
{
if(!FStMachine.MoveNext()) FStMachine=UpdateFriction();
if(!TStMachine.MoveNext()) TStMachine=UpdateTorque();
if(!HStMachine.MoveNext()) HStMachine=UpdateHeight();
if(!StrStMachine.MoveNext()) StrStMachine=UpdateStrenght();
if(!SpdStMachine.MoveNext()) SpdStMachine=UpdateSpeedLim();
if(!SteStMachine.MoveNext()) SteStMachine=UpdateSteerAngl();
if(!BrStMachine.MoveNext()) BrStMachine=UpdateBrakes();
if(!WlAdrStMachine.MoveNext()) WlAdrStMachine=UpdateWheelAdder();
}
else if(EnableState)
{
ReleaseControl();
InitStateMachines();
}
EnableState=Enabled;
}
}
IEnumerator&lt;bool&gt; UpdateFriction()
{
int temp=FrictionSkipCycles-1;
for(;FCycleNum&lt;temp;++FCycleNum)
yield return true;
FCycleNum=0;
// calc. friction modifiers to get proper total friction point against velocity and CoM
double baseFriction;
double driftAngleSinThreshold=0.017;
double wheelsBaseZ=1,frictionLowerLever=1,driftAngleSin=0;
double rearHalfZ=double.MinValue;
double frontHalfZ=double.MaxValue;
double minBrakeFriction=double.MaxValue;
if(Dynamics.Velocity.Scalar&gt;5)
{
Vector3D velocityLocal=Vector3D.TransformNormal(Dynamics.Velocity.Vector,MatrixD.Transpose(RC.WorldMatrix));
velocityLocal.Y=0;
velocityLocal.Normalize();
driftAngleSin=Math.Abs(velocityLocal.Dot(Vector3D.Right));
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.IsAttached)
{
suspension.UpdatePositionVelocity(-velocityLocal);
rearHalfZ=Math.Max(rearHalfZ,suspension.WheelPositionAgainstVelocity);
frontHalfZ=Math.Min(frontHalfZ,suspension.WheelPositionAgainstVelocity);
minBrakeFriction=Math.Min(minBrakeFriction,suspension.BrakeFrictionDistributionRatio);
}
}
wheelsBaseZ=rearHalfZ-frontHalfZ;
frictionLowerLever=(0.95-MathHelperD.Clamp(driftAngleSin*2,0,0.9))*rearHalfZ/-frontHalfZ;
}
if(wheelsBaseZ==0)
wheelsBaseZ=1;
baseFriction=100-35*Math.Abs(UserInput.AD);
if(driftAngleSin&gt;driftAngleSinThreshold)
baseFriction*=(1-MathHelperD.Clamp(driftAngleSin*2,0,0.5));
if(FrictionSkipCycles&gt;0) yield return true;

double friction;
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.IsAttached)
{
friction=baseFriction;
if(Dynamics.Velocity.Scalar&gt;0.5)
{
if(RC.HandBrake||UserInput.CSpacebar&gt;0) // friction rebalance at braking
friction*=suspension.BrakeFrictionDistributionRatio;
else if(driftAngleSin&gt;driftAngleSinThreshold&amp;&amp;Dynamics.Velocity.SideAbs&gt;5) // friction rebalance against velocity
friction*=frictionLowerLever+(1-frictionLowerLever)*(suspension.WheelPositionAgainstVelocity-frontHalfZ)/wheelsBaseZ;
if(UserInput.AD!=0&amp;&amp;UserInput.WS&lt;0&amp;&amp;UserInput.CSpacebar&gt;0&amp;&amp;suspension.WheelPositionAgainstCoM.Z&gt;0&amp;&amp;Dynamics.Velocity.Forward&gt;8)
friction*=minBrakeFriction*1.4;
friction=Math.Max(friction,5);
}
suspension.Friction=friction;
}
}
}
IEnumerator&lt;bool&gt; UpdateTorque()
{
int temp=TorqueSkipCycles-1;
for(;TCycleNum&lt;temp;++TCycleNum)
{
RampUpDownTorque();
AmplifyPropulsion();
yield return true;
}
TCycleNum=0;

double maxTurnRadius=1;
foreach(var suspension in WheelSuspensions)
if(suspension.Obj.IsAttached)
maxTurnRadius=Math.Max(maxTurnRadius,suspension.TurnRadiusCurrent);
if(TorqueSkipCycles&gt;0)
{
yield return true;
RampUpDownTorque();
AmplifyPropulsion();
}

RampUpDownTorque();
AmplifyPropulsion();
double torque;
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.IsAttached)
{
torque=CurrentTorque*PowerLimit;
if(Dynamics.Velocity.Scalar&gt;0.5)
torque*=suspension.TurnRadiusCurrent/maxTurnRadius;
torque=Math.Min(torque,100*PowerLimit);
suspension.Power=torque;

if(Dynamics.Velocity.VerticalAbs&lt;1) // !!workaround: another Keen's bug
{
double speedLimitKPH=Dynamics.Velocity.Forward&gt;0 ? ForwardSpeedLimitKPH : BackwardSpeedLimitKPH;
double propulsion=0;
if(UseHillDescentControl&amp;&amp;Dynamics.Velocity.LateralAbs*3.6&gt;speedLimitKPH&amp;&amp;!(UserInput.WS!=0&amp;&amp;UserInput.CSpacebar&lt;0))
propulsion=suspension.PropulsionSign*Math.Sign(Dynamics.Velocity.Forward);
else if(suspension.IsSubgrid||ForceFullOverride)
propulsion=torque/100*suspension.PropulsionSign*UserInput.WS*PropulsionAmp;
propulsion=Math.Min(propulsion,PowerLimit);
suspension.PropulsionOverride=propulsion;
}
else
suspension.PropulsionOverride=0;
}
}
}
IEnumerator&lt;bool&gt; UpdateHeight()
{
for(;HCycleNum&lt;HeightOfstSkipCycles;++HCycleNum)
yield return true;
HCycleNum=0;

double currentHeightOffset;
double clampedTargetHeightOffset;
double temp;
double delta=HeightOffsetDelta/ValueChangeRate*(HeightOfstSkipCycles+1);
BusyWithHeight=false;
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.IsAttached)
{
currentHeightOffset=suspension.Height;
clampedTargetHeightOffset=MathHelperD.Clamp(_HeightOffset,suspension.HeightOffsetMin,suspension.HeightOffsetMax);
temp=Math.Round(clampedTargetHeightOffset-currentHeightOffset,2);
if(temp&lt;0)
{
currentHeightOffset=Math.Max(currentHeightOffset-delta,clampedTargetHeightOffset);
suspension.Height=currentHeightOffset;
BusyWithHeight=true;
}
else if(temp&gt;0)
{
currentHeightOffset=Math.Min(currentHeightOffset+delta,clampedTargetHeightOffset);
suspension.Height=currentHeightOffset;
BusyWithHeight=true;
}
}
}
}
IEnumerator&lt;bool&gt; UpdateStrenght()
{
for(;StrCycleNum&lt;StrenghtSkipCycles;++StrCycleNum)
yield return true;
StrCycleNum=0;

double currentStrenght;
double strenght;
double temp;
double delta=StrenghtDelta/ValueChangeRate*(HeightOfstSkipCycles+1);
BusyWithStrenght=false;
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.IsAttached)
{
if(_Strenght&gt;=0)
strenght=_Strenght;
else if(GridSprungWeight&gt;0)
{
strenght=Math.Sqrt(suspension.WeightDistributionRatio*GridSprungWeight);
if(suspension.Obj.CubeGrid.GridSizeEnum==MyCubeSize.Small)
{
if(suspension.Obj.BlockDefinition.SubtypeName.Contains("5x5"))
strenght/=18.5;
else
strenght/=15;
}
else
{
if(suspension.Obj.BlockDefinition.SubtypeName.Contains("5x5"))
strenght/=55;
else
strenght/=52.5;
}
}
else
strenght=5;

currentStrenght=suspension.Strength;
double fallVelocityExceeding=RC.WorldMatrix.Down.Dot(suspension.GetVelocityAtPoint(RC))/10;
if(fallVelocityExceeding&gt;1&amp;&amp;UseDASAirShock)
currentStrenght=strenght*fallVelocityExceeding*fallVelocityExceeding;
else if(Dynamics.Velocity.Up&gt;1&amp;&amp;UseDASAirShock)
currentStrenght=strenght;
else
{
temp=Math.Round(strenght-currentStrenght,2);
if(temp&lt;0)
{
currentStrenght=Math.Max(currentStrenght-delta,strenght);
BusyWithStrenght=true;
}
else if(temp&gt;0)
{
currentStrenght=Math.Min(currentStrenght+delta,strenght);
BusyWithStrenght=true;
}
}
if(Math.Abs(UserInput.AD)&lt;0.2) // !!workaround: steering bug
suspension.Strength=currentStrenght;
}
}
}
IEnumerator&lt;bool&gt; UpdateSpeedLim()
{
for(;SpdCycleNum&lt;SpeedLimitSkipCycles;++SpdCycleNum)
yield return true;
SpdCycleNum=0;

if(UserInput.WS!=0)
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.IsAttached)
{
if(UserInput.CSpacebar&lt;0)
suspension.SpeedLimit=360*Math.Abs(UserInput.WS);
else if(Dynamics.Velocity.Forward&gt;0)
suspension.SpeedLimit=ForwardSpeedLimitKPH*Math.Abs(UserInput.WS);
else
suspension.SpeedLimit=BackwardSpeedLimitKPH*Math.Abs(UserInput.WS);
}
}
}
IEnumerator&lt;bool&gt; UpdateSteerAngl()
{
for(;SteCycleNum&lt;SteerSkipCycles;++SteCycleNum)
yield return true;
SteCycleNum=0;

double safeTurnRadiusRight=0;
double safeTurnRadiusLeft=0;
double turnCath=0;
double steerAngle=0;
bool adaptiveSteering;
if((UserInput.AD!=0&amp;&amp;UserInput.WS!=0&amp;&amp;UserInput.CSpacebar&gt;0)||Dynamics.Velocity.LateralAbs&lt;0.5)
adaptiveSteering=false;
else
adaptiveSteering=UseAdaptiveSteering;
if(adaptiveSteering&amp;&amp;Gravity.Magnitude&gt;0)
{
double pow=Camera.SurfaceType==MyDetectedEntityType.LargeGrid ? 2 : 1.5;
if(UserInput.AD&lt;0)
safeTurnRadiusLeft=Math.Pow(Dynamics.Velocity.LateralAbs,pow)/(Gravity.Magnitude*Math.Cos(MathHelperD.Clamp(CoMToWheelsBaseAngle+Orientation.Roll,1e-6,MathHelperD.Pi/2.1)));
else if(UserInput.AD&gt;0)
safeTurnRadiusRight=Math.Pow(Dynamics.Velocity.LateralAbs,pow)/(Gravity.Magnitude*Math.Cos(MathHelperD.Clamp(CoMToWheelsBaseAngle-Orientation.Roll,1e-6,MathHelperD.Pi/2.1)));
}
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.Steering&amp;&amp;suspension.Obj.IsAttached)
{
if(UserInput.AD!=0&amp;&amp;UseAckermannSteering)
{
if(adaptiveSteering)
{
if(UserInput.AD&gt;0)
turnCath=Math.Max(VehicleTurnRadiusRight,safeTurnRadiusRight)-suspension.WheelPositionAgainstRef.X;
else
turnCath=Math.Min(VehicleTurnRadiusLeft,-safeTurnRadiusLeft)-suspension.WheelPositionAgainstRef.X;
steerAngle=Math.Abs(Math.Atan(suspension.WheelPositionAgainstRef.Z/turnCath));
suspension.TurnRadiusCurrent=Math.Sqrt(suspension.WheelPositionAgainstRef.Z*suspension.WheelPositionAgainstRef.Z+turnCath*turnCath);
}
else
{
if(UserInput.AD&gt;0)
{
steerAngle=suspension.RightMaxSteerAngle;
suspension.TurnRadiusCurrent=suspension.TurnRadiusRightMin;
}
else
{
steerAngle=suspension.LeftMaxSteerAngle;
suspension.TurnRadiusCurrent=suspension.TurnRadiusLeftMin;
}
}
suspension.MaxSteerAngle=steerAngle;
}
else
suspension.TurnRadiusCurrent=1;
if(suspension.IsSubgrid||ForceFullOverride)
suspension.SteerOverrie=-Math.Sign(suspension.WheelPositionAgainstRef.Z)*UserInput.AD;
}
}
}
IEnumerator&lt;bool&gt; UpdateBrakes()
{
int temp=BrakesSkipCycles-1;
for(;BrCycleNum&lt;temp;++BrCycleNum)
yield return true;
BrCycleNum=0;

foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.IsAttached)
{
if(suspension.WheelPositionAgainstCoM.Z&gt;0&amp;&amp;UserInput.WS!=0&amp;&amp;!RC.HandBrake)
suspension.Obj.Brake=false;
else
suspension.Obj.Brake=true;
}
}
if(BrakesSkipCycles&gt;0) yield return true;
// If there slave controllers on wheeled subgrid-handle handbrakes
if(SlaveShipControllers.Count&gt;0)
{
if(UserInput.CSpacebar&gt;0||RC.HandBrake)
foreach(var sc in SlaveShipControllers)
sc.HandBrake=true;
else
foreach(var sc in SlaveShipControllers)
sc.HandBrake=false;
}
}
IEnumerator&lt;bool&gt; UpdateWheelAdder()
{
for(;WlAdrCycleNum&lt;WheelAddSkipCycles;++WlAdrCycleNum)
yield return true;
WlAdrCycleNum=0;

foreach(var suspension in WheelSuspensions)
{
if(!suspension.Obj.IsAttached)
{
for(int i=0;i&lt;=10;++i)
{
if(suspension.AddTopPart())
break;
yield return true;
suspension.Height=suspension.HeightOffsetMin+suspension.HeightOffsetRange/10.0*i;
}
}
}
}
void RampUpDownTorque()
{
if((Dynamics.Acceleration.AvrEMA&lt;MaxForwardAcceleration&amp;&amp;UserInput.WS&lt;0)
|| (Dynamics.Acceleration.AvrEMA&lt;MaxBackwardAcceleration&amp;&amp;UserInput.WS&gt;0))
CurrentTorque=Math.Min(CurrentTorque*1.05,100);
else
CurrentTorque=Math.Max(CurrentTorque*0.9,5);
}
void AmplifyPropulsion()
{
if(Dynamics.Velocity.LateralAbs*3.6&lt;Math.Abs(UserInput.WS)*ForwardSpeedLimitKPH*0.9&amp;&amp;UserInput.WS&lt;0)
PropulsionAmp=Math.Min(PropulsionAmp*1.01,360.0/ForwardSpeedLimitKPH);
else if(Dynamics.Velocity.LateralAbs*3.6&lt;Math.Abs(UserInput.WS)*BackwardSpeedLimitKPH*0.9&amp;&amp;UserInput.WS&gt;0)
PropulsionAmp=Math.Min(PropulsionAmp*1.01,360.0/BackwardSpeedLimitKPH);
else
PropulsionAmp=Math.Max(PropulsionAmp*0.95,1);
}
void InitStateMachines()
{
FStMachine=UpdateFriction();
TStMachine=UpdateTorque();
HStMachine=UpdateHeight();
StrStMachine=UpdateStrenght();
SpdStMachine=UpdateSpeedLim();
SteStMachine=UpdateSteerAngl();
BrStMachine=UpdateBrakes();
WlAdrStMachine=UpdateWheelAdder();
}
}

class FallDampeningSystem : BaseClass
{
int CycleNum;
int AltitudeAge;
IEnumerator&lt;bool&gt; StMachine;
bool EnableState;
List&lt;IMyThrust&gt; Thrusters;
GridDynamicsWatcher Dynamics;
GravityWatcher Gravity;
GridMassWatcher Mass;
CameraScheduler Camera;
IInputData UserInput;
double Altitude;
double AltitudePrev;
double EmpiricDescentVeloc;
double Time;

public bool Enabled;
new public bool Ready {get {return (this as BaseClass).Ready&amp;&amp;Thrusters.Count&gt;0;}}
public bool EnoughThrust {get;set;}
public bool UseJumpJets;
public int SkipCycles;
public double SafeFallVelocity;
public double dT=0.016;
public FallDampeningSystem(Program parent,GridDynamicsWatcher dynamics,GravityWatcher gravity,
GridMassWatcher masses,CameraScheduler camera,IInputData userInput=null,
int skipCycles=0,int skipOffset=0)
: base(parent)
{
Dynamics=dynamics;
Gravity=gravity;
Mass=masses;
Camera=camera;
UserInput=userInput;
SkipCycles=skipCycles;
CycleNum=skipOffset;
Thrusters=new List&lt;IMyThrust&gt;();
StMachine=UpdateIterator();
EnoughThrust=true;
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
Thrusters.Clear();
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
if(RC!=null)
{
Base6Directions.Direction blockOrientation;
List&lt;IMyThrust&gt; allThrusters=new List&lt;IMyThrust&gt;();
Parent.GridTerminalSystem.GetBlocksOfType(allThrusters,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
foreach(var thruster in allThrusters)
{
blockOrientation=RC.Orientation.TransformDirectionInverse(thruster.Orientation.Forward);
if(blockOrientation==Base6Directions.Direction.Down)
Thrusters.Add(thruster);
}
ReleaseControl();
}
}
public void ReleaseControl()
{
foreach(var thruster in Thrusters)
thruster.ThrustOverride=0;
}
public void Update()
{
if(Ready)
{
if(Enabled)
{
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
else if(EnableState)
{
ReleaseControl();
StMachine=UpdateIterator();
}
EnableState=Enabled;
}
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
{
Time+=dT;
if(Camera.Ready&amp;&amp;Camera.DataAge==0)
{
EmpiricDescentVeloc=(AltitudePrev-Camera.Altitude)/Time;
Time=0;
AltitudePrev=Altitude=Camera.Altitude;
AltitudeAge=0;
}
else
IntegrateAltitude();
yield return true;
}
CycleNum=0;

Time+=dT;
if(Camera.Ready&amp;&amp;Camera.DataAge==0)
{
EmpiricDescentVeloc=(AltitudePrev-Camera.Altitude)/Time;
Time=0;
AltitudePrev=Altitude=Camera.Altitude;
AltitudeAge=0;
}
else if(AltitudeAge&gt;Camera.SkipCycles*3)
{
double alt=0;
RC.TryGetPlanetElevation(MyPlanetElevation.Surface,out alt);
alt-=RC.CubeGrid.WorldVolume.Radius;
EmpiricDescentVeloc=(AltitudePrev-alt)/Time;
Time=0;
AltitudePrev=Altitude=alt;
AltitudeAge=0;
}
else
IntegrateAltitude();
double discriminantOver4=-1;
double fallVelocity=0;
if(Gravity.Magnitude&gt;0)
{
double totalThrustForce=0;
foreach(var thruster in Thrusters)
if(thruster.IsWorking)
totalThrustForce+=thruster.MaxEffectiveThrust;
double liftThrust=totalThrustForce/Mass.Masses.PhysicalMass-Gravity.Magnitude;
EnoughThrust=liftThrust&gt;0;
if(Dynamics.Velocity.Down&gt;SafeFallVelocity)
fallVelocity=Dynamics.Velocity.Down*0.3+EmpiricDescentVeloc*0.7;
else
fallVelocity=Dynamics.Velocity.Down;
discriminantOver4=fallVelocity*fallVelocity-liftThrust*2*Altitude;
}
if((discriminantOver4&gt;=0&amp;&amp;fallVelocity&gt;SafeFallVelocity)||(UserInput.CSpacebar&gt;0&amp;&amp;UseJumpJets))
foreach(var thruster in Thrusters)
thruster.ThrustOverridePercentage=1;
else if(UserInput!=null)
foreach(var thruster in Thrusters)
thruster.ThrustOverride=0.01f;
}
void IntegrateAltitude()
{
Altitude+=Dynamics.Velocity.Up*dT;
++AltitudeAge;
}
}

class GyroStabilisationAssisting : BaseClass
{
List&lt;IMyGyro&gt; Gyros;
GravityWatcher Gravity;
OrientationComputer OrientationPrime;
OrientationComputer OrientationSecond;
CameraScheduler Camera;
GridDynamicsWatcher Dynamics;
IInputData UserInput;
PID PitchPID;
PID RollPID;
Vector3D AnglesPrev;
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
double Time;
bool EnableState;

public bool Enabled;
new public bool Ready {get {return (this as BaseClass).Ready&amp;&amp;Gyros.Count&gt;0;}}
public bool IsAllGyrosWorking {get;set;}
public int SkipCycles;
public double dT=0.016;
public double MinGyroPower=0.2;
public double NaturalPitchDegree;
public double VehicleTurnRadiusRight;
public double VehicleTurnRadiusLeft;
public double CoMToWheelsBaseAngle;
public GyroStabilisationAssisting(Program parent,GravityWatcher gravity,
OrientationComputer orientation,CameraScheduler camera,GridDynamicsWatcher dynamics,
int skipCycles=0,int skipOffset=0) : base(parent)
{
Gravity=gravity;
OrientationPrime=orientation;
Camera=camera;
Dynamics=dynamics;
SkipCycles=skipCycles;
CycleNum=skipOffset;
Gyros=new List&lt;IMyGyro&gt;();
OrientationSecond=new OrientationComputer(parent);
PitchPID=new PID(3,0,0.33);
RollPID=new PID(3,0,0.33);
StMachine=UpdateIterator();
IsAllGyrosWorking=true;
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
Gyros.Clear();
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
if(RC!=null)
{
Parent.GridTerminalSystem.GetBlocksOfType(Gyros,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
OrientationSecond.RC=RC;
}
}
public void ReleaseControl()
{
foreach(var gyro in Gyros)
{
gyro.GyroOverride=false;
gyro.GyroPower=100;
}
}
public void SetInputSource(IInputData source)
{
UserInput=source;
}
public void Update()
{
if(Ready)
{
if(Enabled)
{
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
else if(EnableState)
{
ReleaseControl();
StMachine=UpdateIterator();
}
EnableState=Enabled;
}
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
int temp=SkipCycles-1;
for(;CycleNum&lt;temp;++CycleNum)
{
Time+=dT;
yield return true;
}
CycleNum=0;

Time+=dT;
if(Gravity.Magnitude==0) yield break;
Vector3D angles=OrientationPrime.RollYawPitch;
if(!Vector3D.IsZero(Camera.SurfaceTilt))
{
Vector3D tempv=Gravity.Direction;
tempv=Vector3D.Reject(Gravity.Direction,Vector3D.Normalize(Camera.SurfaceTilt));
if(!Vector3D.IsZero(Camera.SurfaceBank))
tempv=Vector3D.Reject(tempv,Vector3D.Normalize(Camera.SurfaceBank));
OrientationSecond.Update(tempv,true);
angles=OrientationSecond.RollYawPitch;
if(Math.Abs(angles.X)&lt;0.05236) // 3 degree
angles.X=0;
if(Math.Abs(angles.Z)&lt;0.05236)
angles.Z=0;
}
else if(Dynamics.Velocity.Down&gt;3)
{
double vLen=Gravity.Magnitude*0.364;// tan(20 deg)
Vector3D tempv=Vector3D.Normalize(Dynamics.Velocity.Vector)*vLen+Gravity.Direction;
OrientationSecond.Update(tempv,true);
angles=OrientationSecond.RollYawPitch;
}

angles.Z-=MathHelperD.ToRadians(NaturalPitchDegree);
angles.X=-angles.X;
angles.Y=0;
if(UserInput.AD!=0)
{
if(Dynamics.Velocity.VerticalAbs&gt;0.5)
{
angles.Y=UserInput.AD*0.618;
if(Dynamics.Velocity.Backward&gt;=0.1)
angles.Y=-angles.Y;
}
else
{
if(UserInput.AD&gt;0&amp;&amp;VehicleTurnRadiusRight&gt;0)
{
double safeTurnRadiusRight=Math.Pow(Dynamics.Velocity.LateralAbs,1.5)/(Gravity.Magnitude*Math.Cos(MathHelperD.Clamp(CoMToWheelsBaseAngle-OrientationPrime.Roll,1e-6,MathHelperD.Pi/2.1)));
angles.Y=Dynamics.Velocity.Forward/Math.Max(VehicleTurnRadiusRight,safeTurnRadiusRight)*UserInput.AD;
}
else if(UserInput.AD&lt;0&amp;&amp;VehicleTurnRadiusLeft&lt;0)
{
double safeTurnRadiusLeft=Math.Pow(Dynamics.Velocity.LateralAbs,1.5)/(Gravity.Magnitude*Math.Cos(MathHelperD.Clamp(CoMToWheelsBaseAngle+OrientationPrime.Roll,1e-6,MathHelperD.Pi/2.1)));
angles.Y=Dynamics.Velocity.Forward/Math.Min(VehicleTurnRadiusLeft,-safeTurnRadiusLeft)*-UserInput.AD;
}
}
}
Vector3D PIDSignal=Vector3D.Zero;
bool blackScienceEquation=(angles-AnglesPrev).AbsMax()&gt;=angles.AbsMax()/5||angles.Y!=0;
if(blackScienceEquation)
{
AnglesPrev=angles;
PIDSignal.Y=angles.Y;
PIDSignal.X=RollPID.GetSignal(angles.X,Time);
PIDSignal.Z=PitchPID.GetSignal(angles.Z,Time);
}
if(SkipCycles&gt;0)
{
yield return true;
Time+=dT;
}
double gyroPower=MathHelperD.Clamp(angles.AbsMax()/MathHelperD.PiOver4,MinGyroPower,1.0);
Base6Directions.Direction gyroOrientation;
int workingGyrosCount=0;
foreach(var gyro in Gyros)
{
if(gyro.IsWorking)
{
++workingGyrosCount;
if(blackScienceEquation)
{
gyro.GyroOverride=true;
gyro.GyroPower=(float)gyroPower;
gyroOrientation=RC.Orientation.TransformDirectionInverse(gyro.Orientation.Up);
switch(gyroOrientation)
{
case Base6Directions.Direction.Up: gyro.Yaw=(float)PIDSignal.Y;break;
case Base6Directions.Direction.Down: gyro.Yaw=-(float)PIDSignal.Y;break;
case Base6Directions.Direction.Forward: gyro.Yaw=-(float)PIDSignal.X;break;
case Base6Directions.Direction.Backward: gyro.Yaw=(float)PIDSignal.X;break;
case Base6Directions.Direction.Left: gyro.Yaw=-(float)PIDSignal.Z;break;
case Base6Directions.Direction.Right: gyro.Yaw=(float)PIDSignal.Z;break;
}
gyroOrientation=RC.Orientation.TransformDirectionInverse(gyro.Orientation.Left);
switch(gyroOrientation)
{
case Base6Directions.Direction.Up: gyro.Pitch=-(float)PIDSignal.Y;break;
case Base6Directions.Direction.Down: gyro.Pitch=(float)PIDSignal.Y;break;
case Base6Directions.Direction.Forward: gyro.Pitch=(float)PIDSignal.X;break;
case Base6Directions.Direction.Backward: gyro.Pitch=-(float)PIDSignal.X;break;
case Base6Directions.Direction.Left: gyro.Pitch=(float)PIDSignal.Z;break;
case Base6Directions.Direction.Right: gyro.Pitch=-(float)PIDSignal.Z;break;
}
gyroOrientation=RC.Orientation.TransformDirectionInverse(gyro.Orientation.Forward);
switch(gyroOrientation)
{
case Base6Directions.Direction.Up: gyro.Roll=-(float)PIDSignal.Y;break;
case Base6Directions.Direction.Down: gyro.Roll=(float)PIDSignal.Y;break;
case Base6Directions.Direction.Forward: gyro.Roll=(float)PIDSignal.X;break;
case Base6Directions.Direction.Backward: gyro.Roll=-(float)PIDSignal.X;break;
case Base6Directions.Direction.Left: gyro.Roll=(float)PIDSignal.Z;break;
case Base6Directions.Direction.Right: gyro.Roll=-(float)PIDSignal.Z;break;
}
}
}
}
IsAllGyrosWorking=workingGyrosCount==Gyros.Count;
}
}

class SmartDampenersOverride : BaseClass
{
List&lt;IMyThrust&gt; ForwardThrusters;
List&lt;IMyThrust&gt; BackwardThrusters;
List&lt;IMyThrust&gt; RightwardThrusters;
List&lt;IMyThrust&gt; LeftwardThrusters;
GridDynamicsWatcher Dynamics;
IInputData UserInput;
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
bool EnableState;

public bool Enabled;
new public bool Ready
{
get
{
return (this as BaseClass).Ready &amp;&amp;
(ForwardThrusters.Count+BackwardThrusters.Count+RightwardThrusters.Count+LeftwardThrusters.Count)&gt;0;
}
}
public int SkipCycles;
public SmartDampenersOverride(Program parent,GridDynamicsWatcher dynamics,
int skipCycles=0,int skipOffset=0) : base(parent)
{
Dynamics=dynamics;
SkipCycles=skipCycles;
CycleNum=skipOffset;
ForwardThrusters=new List&lt;IMyThrust&gt;();
BackwardThrusters=new List&lt;IMyThrust&gt;();
RightwardThrusters=new List&lt;IMyThrust&gt;();
LeftwardThrusters=new List&lt;IMyThrust&gt;();
StMachine=UpdateIterator();
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
ForwardThrusters.Clear();
BackwardThrusters.Clear();
RightwardThrusters.Clear();
LeftwardThrusters.Clear();
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
if(RC!=null)
{
Base6Directions.Direction blockOrientation;
List&lt;IMyThrust&gt; allThrusters=new List&lt;IMyThrust&gt;();
Parent.GridTerminalSystem.GetBlocksOfType(allThrusters,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
foreach(var thruster in allThrusters)
{
blockOrientation=RC.Orientation.TransformDirectionInverse(thruster.Orientation.Forward);
switch(blockOrientation)
{
case Base6Directions.Direction.Backward:
ForwardThrusters.Add(thruster);
break;
case Base6Directions.Direction.Forward:
BackwardThrusters.Add(thruster);
break;
case Base6Directions.Direction.Right:
LeftwardThrusters.Add(thruster);
break;
case Base6Directions.Direction.Left:
RightwardThrusters.Add(thruster);
break;
}
}
}
}
public void ReleaseControl()
{
foreach(var thruster in ForwardThrusters)
thruster.ThrustOverride=0;
foreach(var thruster in BackwardThrusters)
thruster.ThrustOverride=0;
foreach(var thruster in LeftwardThrusters)
thruster.ThrustOverride=0;
foreach(var thruster in RightwardThrusters)
thruster.ThrustOverride=0;
}
public void SetInputSource(IInputData source)
{
UserInput=source;
}
public void Update()
{
if(Ready)
{
if(Enabled)
{
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
else if(EnableState)
{
ReleaseControl();
StMachine=UpdateIterator();
}
EnableState=Enabled;
}
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CycleNum=0;

if((RC.DampenersOverride&amp;&amp;(UserInput.WS&gt;=0||Dynamics.Velocity.Backward&gt;1))||(UserInput.WS!=0&amp;&amp;UserInput.CSpacebar&lt;0))
foreach(var thruster in ForwardThrusters)
thruster.ThrustOverride=0;
else
foreach(var thruster in ForwardThrusters)
thruster.ThrustOverride=0.01f;

if((RC.DampenersOverride&amp;&amp;(UserInput.WS&lt;=0||Dynamics.Velocity.Forward&gt;1))||(UserInput.WS!=0&amp;&amp;UserInput.CSpacebar&lt;0))
foreach(var thruster in BackwardThrusters)
thruster.ThrustOverride=0;
else
foreach(var thruster in BackwardThrusters)
thruster.ThrustOverride=0.01f;

if(RC.DampenersOverride&amp;&amp;!(UserInput.AD&gt;0&amp;&amp;Dynamics.Velocity.Right&gt;1)&amp;&amp;Dynamics.Velocity.SideAbs&gt;1)
{
if(UserInput.AD&lt;0&amp;&amp;Dynamics.Velocity.Left&gt;1)
foreach(var thruster in RightwardThrusters)
thruster.ThrustOverridePercentage=1;
else
foreach(var thruster in RightwardThrusters)
thruster.ThrustOverride=0;
}
else
foreach(var thruster in RightwardThrusters)
thruster.ThrustOverride=0.01f;

if(RC.DampenersOverride&amp;&amp;!(UserInput.AD&lt;0&amp;&amp;Dynamics.Velocity.Left&gt;1)&amp;&amp;Dynamics.Velocity.SideAbs&gt;1)
{
if(UserInput.AD&gt;0&amp;&amp;Dynamics.Velocity.Right&gt;1)
foreach(var thruster in LeftwardThrusters)
thruster.ThrustOverridePercentage=1;
else
foreach(var thruster in LeftwardThrusters)
thruster.ThrustOverride=0;
}
else
foreach(var thruster in LeftwardThrusters)
thruster.ThrustOverride=0.01f;
}
}

class LightsManager : BaseClass
{
List&lt;IMyLightingBlock&gt; StopLights;
List&lt;IMyLightingBlock&gt; TurnLights;
GridDynamicsWatcher Dynamics;
IInputData UserInput;
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
bool EnableState;
string StopLightsGroupName;
string TurnLightsGroupName;

public bool Enabled;
new public bool Ready {get {return (this as BaseClass).Ready&amp;&amp;(StopLights.Count+TurnLights.Count)&gt;0;}}
public int SkipCycles;
public LightsManager(Program parent,GridDynamicsWatcher dynamics,string stopLightGrpNm,
string turnLightGrpNm,int skipCycles=0,int skipOffset=0) : base(parent)
{
Dynamics=dynamics;
StopLightsGroupName=stopLightGrpNm;
TurnLightsGroupName=turnLightGrpNm;
SkipCycles=skipCycles;
CycleNum=skipOffset;
StopLights=new List&lt;IMyLightingBlock&gt;();
TurnLights=new List&lt;IMyLightingBlock&gt;();
StMachine=UpdateIterator();
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
StopLights.Clear();
TurnLights.Clear();
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
if(RC!=null)
{
IMyBlockGroup lightsGroup=Parent.GridTerminalSystem.GetBlockGroupWithName(StopLightsGroupName);
if(lightsGroup!=null)
lightsGroup.GetBlocksOfType(StopLights,block =&gt; block.IsSameConstructAs(Parent.Me));

lightsGroup=Parent.GridTerminalSystem.GetBlockGroupWithName(TurnLightsGroupName);
if(lightsGroup!=null)
lightsGroup.GetBlocksOfType(TurnLights,block =&gt; block.IsSameConstructAs(Parent.Me));
}
}
public void ReleaseControl()
{
foreach(var light in StopLights)
light.Enabled=true;
foreach(var light in TurnLights)
light.Enabled=true;
}
public void SetInputSource(IInputData source)
{
UserInput=source;
}
public void Update()
{
if(Ready)
{
if(Enabled)
{
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
else if(EnableState)
{
ReleaseControl();
StMachine=UpdateIterator();
}
EnableState=Enabled;
}
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
int temp=SkipCycles-1;
for(;CycleNum&lt;temp;++CycleNum)
yield return true;
CycleNum=0;

foreach(var light in StopLights)
{
if((Dynamics.Velocity.Forward&gt;0.4&amp;&amp;Dynamics.Acceleration.AvrEMA&lt;0&amp;&amp;UserInput.WS&gt;=0)||UserInput.CSpacebar&gt;0)
{
light.Radius=2f;
light.Intensity=5f;
light.Falloff=1.3f;
light.Color=Color.Red;
}
else if(Dynamics.Velocity.Backward&gt;0.5)
{
light.Radius=5f;
light.Intensity=5f;
light.Falloff=1.3f;
light.Color=Color.White;
}
else
{
light.Radius=1f;
light.Intensity=1f;
light.Falloff=0;
light.Color=Color.DarkRed;
}
}
if(SkipCycles&gt;0) yield return true;
foreach(var light in TurnLights)
{
if(light.CustomData.Equals("LEFT",StringComparison.OrdinalIgnoreCase))
{
if(UserInput.AD&lt;0)
light.Enabled=true;
else
light.Enabled=false;
}
else if(light.CustomData.Equals("RIGHT",StringComparison.OrdinalIgnoreCase))
{
if(UserInput.AD&gt;0)
light.Enabled=true;
else
light.Enabled=false;
}
}
}
}

class DisplayScheduler
{
Program Parent;
List&lt;IMyTextSurface&gt; LCDs;
int CycleNum;
int PrintCounter;
IEnumerator&lt;bool&gt; StMachine;
string Keyword;
StringBuilder Str;
CallBackFunk CallBack;

public delegate StringBuilder CallBackFunk(int i);
public bool Ready {get;set;}
public int SkipCycles;
public string Caption;

public DisplayScheduler(Program parent,CallBackFunk callBack,string keyword,int skipCycles=0,int skipOffset=0)
{
Parent=parent;
CallBack=callBack;
Keyword=keyword;
SkipCycles=skipCycles;
CycleNum=skipOffset;
LCDs=new List&lt;IMyTextSurface&gt;();
Str=new StringBuilder();
StMachine=UpdateIterator();
}
public void DetectBlocks()
{
LCDs.Clear();
List&lt;IMyTerminalBlock&gt; lcdHosts=new List&lt;IMyTerminalBlock&gt;();
Parent.GridTerminalSystem.GetBlocksOfType(lcdHosts,block =&gt; block as IMyTextSurfaceProvider!=null&amp;&amp;block.IsSameConstructAs(Parent.Me));
List&lt;string&gt; lines=new List&lt;string&gt;();
IMyTextSurface lcd;
foreach(var block in lcdHosts)
{
if(block.CustomData.Length&gt;0)
{
lines.Clear();
new StringSegment(block.CustomData).GetLines(lines);
foreach(var line in lines)
{
if(line.Contains(Keyword))
{
if(block as IMyTextSurface!=null)
lcd=block as IMyTextSurface;
else
{
int i=0;
int.TryParse(line.Replace(Keyword,""),out i);
IMyTextSurfaceProvider t_sp=block as IMyTextSurfaceProvider;
i=Math.Max(0,Math.Min(i,t_sp.SurfaceCount));
lcd=t_sp.GetSurface(i);
}
lcd.ContentType=ContentType.TEXT_AND_IMAGE;
LCDs.Add(lcd);
}
}
}
}
Ready=LCDs.Count&gt;0;
}
public void ForcePrint(StringBuilder text=null)
{
if(Ready)
{
Str.Clear();
Str.Append(Caption);
++PrintCounter;
switch(PrintCounter % 4)
{
case 0: Str.Append("--");break;
case 1: Str.Append("\\");break;
case 2: Str.Append("|");break;
case 3: Str.Append("/");break;
}
Str.Append("\n_________________________________________________________\n");
if(text!=null)
Str.Append(text);
else
Str.Append(CallBack(PrintCounter));
foreach(var lcd in LCDs)
lcd.WriteText(Str);
}
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
while(CycleNum&lt;SkipCycles)
{
++CycleNum;
yield return true;
}
CycleNum=0;
ForcePrint();
}
}

class AutoHandbrakesSubroutine : BaseClass
{
IInputData UserInput;
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
bool WasManned;

public int SkipCycles;
public HandbrakeMode Mode;
public AutoHandbrakesSubroutine(Program parent,int skipCycles=0,int skipOffset=0)
: base(parent)
{
SkipCycles=skipCycles;
CycleNum=skipOffset;
StMachine=UpdateIterator();
}
public void SetInputSource(IInputData source)
{
UserInput=source;
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CycleNum=0;
if(WasManned&amp;&amp;!UserInput.Manning&amp;&amp;(Mode==HandbrakeMode.Auto||Mode==HandbrakeMode.Semi))
RC.HandBrake=true;
if(!WasManned&amp;&amp;UserInput.Manning&amp;&amp;Mode==HandbrakeMode.Auto)
RC.HandBrake=false;
WasManned=UserInput.Manning;
}
}

class ArtificialMassSubroutine
{
Program Parent;
List&lt;IMyVirtualMass&gt; VirtualMassBlocks;
GravityWatcher Gravity;
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;

public bool Ready {get;private set;}
public int SkipCycles;
public ArtificialMassSubroutine(Program parent,GravityWatcher gravity,int skipCycles=0,int skipOffset=0)
{
Parent=parent;
Gravity=gravity;
SkipCycles=skipCycles;
CycleNum=skipOffset;
VirtualMassBlocks=new List&lt;IMyVirtualMass&gt;();
StMachine=UpdateIterator();
}
public void DetectBlocks()
{
VirtualMassBlocks.Clear();
Parent.GridTerminalSystem.GetBlocksOfType(VirtualMassBlocks,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
Ready=VirtualMassBlocks.Count&gt;0;
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CycleNum=0;
if(Gravity.ArtificialStongerNatural)
foreach(var block in VirtualMassBlocks)
block.Enabled=true;
else
foreach(var block in VirtualMassBlocks)
block.Enabled=false;
}
}

class GPSTrackerSubroutine : BaseClass
{
bool EnableState;
IInputData UserInput;
GridDynamicsWatcher Dynamics;
float ADPrev;
int WaypointNum;

public bool Enabled;
public StringBuilder GPSTrackList {get;}
public GPSTrackerSubroutine(Program parent,IInputData userInput,GridDynamicsWatcher dynamics) : base(parent)
{
UserInput=userInput;
Dynamics=dynamics;
GPSTrackList=new StringBuilder();
}
public void Update()
{
if(Enabled)
{
if(!EnableState)
{
WaypointNum=1;
GPSTrackList.Clear();
ADPrev=1-UserInput.AD;
}
if(UserInput.AD!=ADPrev&amp;&amp;Dynamics.Velocity.VerticalAbs&lt;1)
{
GPSTrackList.AppendFormat("GPS:{0} #{1:D3}:{2:F2}:{3:F2}:{4:F2}:\n",RC.CubeGrid.CustomName,WaypointNum,
RC.CubeGrid.WorldVolume.Center.X,RC.CubeGrid.WorldVolume.Center.Y,RC.CubeGrid.WorldVolume.Center.Z);
++WaypointNum;
ADPrev=UserInput.AD;
}
}
else if(EnableState)
GPSTrackList.AppendFormat("GPS:{0} #{1:D3}:{2:F2}:{3:F2}:{4:F2}:\n",RC.CubeGrid.CustomName,WaypointNum,
RC.CubeGrid.WorldVolume.Center.X,RC.CubeGrid.WorldVolume.Center.Y,RC.CubeGrid.WorldVolume.Center.Z);
EnableState=Enabled;
}
}

class BackupBeeperSubroutine
{
Program Parent;
int CycleNum;
bool IsPlaying;
string SoundBlocksName;
IEnumerator&lt;bool&gt; StMachine;
GridDynamicsWatcher Dynamics;
List&lt;IMySoundBlock&gt; SoundBlocks;

public bool Ready {get;set;}
public int SkipCycles;
public BackupBeeperSubroutine(Program parent,GridDynamicsWatcher dynamics,string soundBlocksName,
int skipCycles=0,int skipOffset=0)
{
Parent=parent;
Dynamics=dynamics;
SoundBlocksName=soundBlocksName;
SkipCycles=skipCycles;
CycleNum=skipOffset;
StMachine=UpdateIterator();
SoundBlocks=new List&lt;IMySoundBlock&gt;();
}
public void DetectBlocks()
{
SoundBlocks.Clear();
Parent.GridTerminalSystem.GetBlocksOfType(SoundBlocks,block =&gt; block.IsSameConstructAs(Parent.Me)&amp;&amp;block.CustomName.Contains(SoundBlocksName));
Ready=SoundBlocks.Count&gt;0;
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
while(CycleNum&lt;SkipCycles)
{
++CycleNum;
yield return true;
}
CycleNum=0;
if(Dynamics.Velocity.Backward&gt;0.5)
{
if(!IsPlaying)
{
foreach(var sb in SoundBlocks)
sb.Play();
IsPlaying=true;
}
}
else
{
if(IsPlaying)
{
foreach(var sb in SoundBlocks)
sb.Stop();
IsPlaying=false;
}
}
}
}

class ConnectorSubroutine : BaseClass
{
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
List&lt;IMyShipConnector&gt; Connectors;

new public bool Ready {get {return (this as BaseClass).Ready&amp;&amp;Connectors.Count&gt;0;}}
public int SkipCycles;
public bool IsConnected {get;private set;}
public ConnectorSubroutine(Program parent,int skipCycles=0,int skipOffset=0)
: base(parent)
{
SkipCycles=skipCycles;
CycleNum=skipOffset;
StMachine=UpdateIterator();
Connectors=new List&lt;IMyShipConnector&gt;();
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
Connectors.Clear();
Parent.GridTerminalSystem.GetBlocksOfType(Connectors,
block =&gt; block.IsSameConstructAs(Parent.Me)&amp;&amp;!Utils.IsIgnore(block));
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CycleNum=0;
IsConnected=false;
foreach(var con in Connectors)
if(con.Status==MyShipConnectorStatus.Connected)
{
IsConnected=true;
break;
}
}
}

UserInputWatcher UserInput;
AutopilotDriver Autopilot;
CruiseControlUnit CruiseControl;
GridDynamicsWatcher VehicleDynamics;
GridMassWatcher VehicleMass;
GravityWatcher Gravity;
OrientationComputer Orientation;
CameraScheduler Cameras;
TractionControlSystem TCS;
FallDampeningSystem FDS;
GyroStabilisationAssisting GSA;
SmartDampenersOverride SDO;
LightsManager Lights;
DisplayScheduler NavgtnDisplays;
DisplayScheduler StatusDisplays;
AutoHandbrakesSubroutine AutoBrakes;
ArtificialMassSubroutine ArtMass;
GPSTrackerSubroutine GPSTracker;
BackupBeeperSubroutine BackupBeeper;
ConnectorSubroutine ConnectorSubrtn;
RuntimeProfiler Profiler;

IEnumerator&lt;bool&gt; BootStMachine;
Program Parent;
bool Booted;
bool Busy;
bool ShowGPSList;
StringBuilder StrN;
StringBuilder StrS;

public double MaxForwardAcceleration {get {return _MaxForwardAccel;} set {_MaxForwardAccel=TCS.MaxForwardAcceleration=value;}}
public double MaxBackwardAcceleration {get {return _MaxBackwardAccel;} set {_MaxBackwardAccel=TCS.MaxBackwardAcceleration=value;}}
public double MaxPowerConsumption {get {return _MaxPowerConsumption;} set {_MaxPowerConsumption=TCS.PowerLimit=value;}}
public double NaturalPitchDegree {get {return _NaturalPitchDegree;} set {_NaturalPitchDegree=GSA.NaturalPitchDegree=VehicleDynamics.NaturalPitchDegree=value;}}
public double SafeFallVelocity {get {return _SafeFallVelocity;} set {_SafeFallVelocity=FDS.SafeFallVelocity=value;}}
public double LeanToSurfaceDistance {get {return _LeanToSurfaceDistance;} set {_LeanToSurfaceDistance=Cameras.CalcSurfaceAfter=value;}}
public double MaxSteerAngleDegree {get {return _MaxSteerAngleDegree;} set {_MaxSteerAngleDegree=TCS.MaxSteerAngleDegree=value;}}
public double ForwardSpeedLimitKPH {get {return _FrwrdSpeedLimitKPH;} set {_FrwrdSpeedLimitKPH=TCS.ForwardSpeedLimitKPH=value;}}
public double BackwardSpeedLimitKPH {get {return _BckwrdSpeedLimitKPH;} set {_BckwrdSpeedLimitKPH=TCS.BackwardSpeedLimitKPH=value;}}
public double SuspensionHeightOffset {get {return _SusHeightOffset;} set {_SusHeightOffset=TCS.HeightOffset=value;}}
public double SuspensionStrenght {get {return _SusStrenght;} set {_SusStrenght=TCS.Strenght=value;}}
public double SuspensionValueChangeRate {get {return _SusValueChangeRate;} set {_SusValueChangeRate=TCS.ValueChangeRate=value;}}
public double AutopilotAccuracy {get {return _AutopilotAccuracy;} set {_AutopilotAccuracy=Autopilot.Accuracy=value;}}
public double AutopilotWait {get {return _AutopilotWait;} set {_AutopilotWait=Autopilot.WaitTimeSec=value;}}
public double AutopilotSpeedLimitKMP {get {return _AutopilotSpeedLimitKMP;} set {_AutopilotSpeedLimitKMP=value;}}
public bool UseJumpJets {get {return _UseJumpJets;} set {_UseJumpJets=FDS.UseJumpJets=value;}}
public bool UseAdaptiveSteering {get {return _UseAdaptiveSteering;} set {_UseAdaptiveSteering=TCS.UseAdaptiveSteering=value;}}
public bool UseAckermannSteering {get {return _UseAckermannSteering;} set {_UseAckermannSteering=TCS.UseAckermannSteering=value;}}
public bool UseDASAirShock {get {return _UseDASAirShock;} set {_UseDASAirShock=TCS.UseDASAirShock=value;}}
public bool UseHillDescentControl {get {return _UseHillDescentControl;} set {_UseHillDescentControl=value;TCS.UseHillDescentControl=Autopilot.Enabled ? true : value;}}
public bool UseGSA {get {return _UseGSA;} set {_UseGSA=GSA.Enabled=value;}}
public bool UseTCS {get {return _UseTCS;} set {_UseTCS=TCS.Enabled=value;}}
public bool UseFDS {get {return _UseFDS;} set {_UseFDS=FDS.Enabled=value;}}
public bool UseSDO {get {return _UseSDO;} set {_UseSDO=SDO.Enabled=value;}}
public bool UseLights {get {return _UseLights;} set {_UseLights=Lights.Enabled=value;}}
public bool Run;
public double Odometer;

public DriverAssistingSystem(Program parentProgram)
{
Parent=parentProgram;

UserInput=new UserInputWatcher(Parent);

VehicleDynamics=new GridDynamicsWatcher(Parent);
VehicleMass=new GridMassWatcher(Parent,9,9);
VehicleMass.SetIgnorArray(new float[] {
100,// player
420,// l.g. 1x1 wheel
105,// s.g. 1x1
590,// l.g. 3x3
205,// s.g. 3x3
760,// l.g. 5x5
310 // s.g. 5x5
});
Gravity=new GravityWatcher(Parent,59,56);
Orientation=new OrientationComputer(Parent,2,2);
Cameras=new CameraScheduler(Parent,VehicleDynamics,2,2);
TCS=new TractionControlSystem(Parent,VehicleDynamics,Gravity,Orientation,Cameras,
_SubgridWheelsGroupName,1,1,7,4,7,1,7,0,9,5,7,5,9,7,59,53);
FDS=new FallDampeningSystem(Parent,VehicleDynamics,Gravity,VehicleMass,Cameras,UserInput,3);
GSA=new GyroStabilisationAssisting(Parent,Gravity,Orientation,Cameras,VehicleDynamics,3,2);
SDO=new SmartDampenersOverride(Parent,VehicleDynamics);
Lights=new LightsManager(Parent,VehicleDynamics,_StopLightsGroupName,_TurnLightsGroupName,9,4);
Autopilot=new AutopilotDriver(Parent,_AutopilotTimerName,5);
CruiseControl=new CruiseControlUnit(Parent,UserInput,VehicleDynamics,Orientation,5);
AutoBrakes=new AutoHandbrakesSubroutine(Parent,9,9);
ArtMass=new ArtificialMassSubroutine(Parent,Gravity,99,91);
GPSTracker=new GPSTrackerSubroutine(Parent,UserInput,VehicleDynamics);
BackupBeeper=new BackupBeeperSubroutine(Parent,VehicleDynamics,_BackupBeeperName,9,8);
ConnectorSubrtn=new ConnectorSubroutine(Parent);

NavgtnDisplays=new DisplayScheduler(Parent,ComposeNavigationData,"DAS_navigation",14,2);
StatusDisplays=new DisplayScheduler(Parent,ComposeStatusData,"DAS_status",29,8);
Profiler=new RuntimeProfiler(Parent,14);
Profiler.Caption="DAS - Driver Assisting System  ";

Run=true;
Load();
VehicleDynamics.NaturalPitchDegree=_NaturalPitchDegree;
TCS.MaxForwardAcceleration=_MaxForwardAccel;
TCS.MaxBackwardAcceleration=_MaxBackwardAccel;
TCS.PowerLimit=_MaxPowerConsumption;
TCS.AckFocal=_AckermannFocalPoint;
TCS.UseAdaptiveSteering=_UseAdaptiveSteering;
TCS.UseAckermannSteering=_UseAckermannSteering;
TCS.UseDASAirShock=_UseDASAirShock;
TCS.UseHillDescentControl=_UseHillDescentControl;
TCS.ForwardSpeedLimitKPH=_FrwrdSpeedLimitKPH;
TCS.BackwardSpeedLimitKPH=_BckwrdSpeedLimitKPH;
TCS.MaxSteerAngleDegree=_MaxSteerAngleDegree;
TCS.HeightOffset=_SusHeightOffset;
TCS.Strenght=_SusStrenght;
TCS.ValueChangeRate=_SusValueChangeRate;
TCS.Enabled=_UseTCS;
FDS.SafeFallVelocity=_SafeFallVelocity;
FDS.UseJumpJets=_UseJumpJets;
FDS.Enabled=_UseFDS;
GSA.NaturalPitchDegree=_NaturalPitchDegree;
GSA.Enabled=_UseGSA;
SDO.Enabled=_UseSDO;
Lights.Enabled=_UseLights;
Cameras.CalcSurfaceAfter=_LeanToSurfaceDistance;
AutoBrakes.Mode=_HandbrakeMode;
Autopilot.WaitTimeSec=_AutopilotWait;
Autopilot.Accuracy=_AutopilotAccuracy;
if(Autopilot.Enabled)
SetAutopilotControl();
else
SetUserControl();

StrN=new StringBuilder();
StrS=new StringBuilder();

BootStMachine=Boot();
Booted=false;
if(Run)
Start();
}

public void Save()
{
MyIni config=new MyIni();
config.Set("General","Run",Run);
config.Set("General","JumpJets",_UseJumpJets);
config.Set("General","HDC",_UseHillDescentControl);
config.Set("General","Odometer",Odometer);

config.Set("Autopilot","Enabled",Autopilot.Enabled);
config.Set("Autopilot","WaitTime",_AutopilotWait);
config.Set("Autopilot","Accuracy",_AutopilotAccuracy);
config.Set("Autopilot","WaypointIndex",Autopilot.WaypointIndx);
config.Set("Autopilot","WaypointSelector",Autopilot.WaypointSelector);
config.Set("Autopilot","DriveMode",(int)Autopilot.DriveMode);

Parent.Storage=config.ToString();
}

public void Start()
{
Busy=true;
Run=true;
Parent.Runtime.UpdateFrequency=UpdateFrequency.Update1;
}

public void Stop()
{
Parent.Runtime.UpdateFrequency=UpdateFrequency.None;
Run=false;
ReleaseAllOverrides();
NavgtnDisplays.ForcePrint(ComposeNavigationData());
StatusDisplays.ForcePrint(ComposeStatusData());

}

public void Update(UpdateType updateSource)
{
if(Booted)
{
double dT=0;
if(updateSource.HasFlag(UpdateType.Update1))
dT=0.016;
else if(updateSource.HasFlag(UpdateType.Update10))
dT=0.16;
else if(updateSource.HasFlag(UpdateType.Update100))
dT=1.6;
FDS.dT=GSA.dT=Cameras.dT=Autopilot.dT=VehicleDynamics.dT=dT;
try
{
ConnectorSubrtn.Update();
if(!ConnectorSubrtn.IsConnected)
{
Gravity.Update();
VehicleMass.Update();
if(VehicleMass.BaseMassChanged)
{
Booted=false;
return;
}
if(VehicleMass.PhysicalMassChanged)
{
TCS.UpdateSuspensionCofiguration();
TCS.UpdateSprungWeight(VehicleMass.Masses.PhysicalMass);
RelayTCSDataToGSA();
}
if(Gravity.MagnitudeChanged)
{
TCS.UpdateSprungWeight(VehicleMass.Masses.PhysicalMass);
RelayTCSDataToGSA();
}
VehicleDynamics.Update();
UserInput.Update();
Autopilot.Update();
CruiseControl.Update();
AutoBrakes.Update();
TCS.Update();
ArtMass.Update();
if(Busy)
{
Cameras.SkipCycles=2+(100-(int)VehicleDynamics.Velocity.Scalar)/14;
Cameras.Update();
Orientation.Update(Gravity.Direction);
GSA.Update();
FDS.Update();
SDO.Update();
Lights.Update();
GPSTracker.Update();
BackupBeeper.Update();
}
if(Autopilot.Enabled&amp;&amp;!Autopilot.Busy)
{
Autopilot.Enabled=false;
SetUserControl();
}
if(CruiseControl.Enabled)
{
if(CruiseControl.Busy)
TCS.ForwardSpeedLimitKPH=TCS.BackwardSpeedLimitKPH=CruiseControl.SpeedKPH;
else
{
CruiseControl.Enabled=false;
SetUserControl();
}
}

if(VehicleDynamics.Velocity.LateralAbs&gt;0.5)
Odometer+=VehicleDynamics.Velocity.LateralAbs*dT;
}
NavgtnDisplays.Update();
StatusDisplays.Update();
bool busy=!ConnectorSubrtn.IsConnected&amp;&amp;(TCS.Busy||Autopilot.Enabled||CruiseControl.Enabled||UserInput.Manning||VehicleDynamics.Velocity.Scalar&gt;0.5);
if(Busy&amp;&amp;!busy)
{
Parent.Runtime.UpdateFrequency=UpdateFrequency.Update10;
Profiler.SkipCycles=2;
}
else if(!Busy&amp;&amp;busy)
{
Parent.Runtime.UpdateFrequency=UpdateFrequency.Update1;
Profiler.SkipCycles=14;
}
Busy=busy;
}
catch(Exception ex) // *Pokemon joke here*
{
Booted=false;
Parent.Echo("Exeption: "+ex.ToString());
VehicleDynamics.Reset();
UserInput.Reset();
ReleaseAllOverrides();
Save();
}
Profiler.Update();
}
else // Run boot sequence
{
if(!BootStMachine.MoveNext())
BootStMachine=Boot();
}
}

public void ChangeHandbrakeMode()
{
++_HandbrakeMode;
if(_HandbrakeMode==HandbrakeMode.END_OF_ENUM)
_HandbrakeMode=0;
AutoBrakes.Mode=_HandbrakeMode;
}

public void ToggleAutopilot(bool reset=true)
{
Autopilot.Enabled=!Autopilot.Enabled;
if(Autopilot.Enabled)
{
Autopilot.ResetWaypointIndex(reset);
SetAutopilotControl();
}
else
SetUserControl();
}

public void ChangeAutopilotDriveMode()
{
++Autopilot.DriveMode;
if(Autopilot.DriveMode==AutopilotDriver.EDriveMode.END_OF_ENUM)
Autopilot.DriveMode=AutopilotDriver.EDriveMode.OneWay;
}

public void InverseAutopilot()
{
Autopilot.InverseRoute();
}

public void ToggleCruiseControl()
{
CruiseControl.Enabled=!CruiseControl.Enabled;
if(CruiseControl.Enabled)
SetCruiseControl();
else
SetUserControl();
}

public void ToggleGPSTracker()
{
if(!CruiseControl.Enabled&amp;&amp;!Autopilot.Enabled)
GPSTracker.Enabled=!GPSTracker.Enabled;
}

public void ToggleGPSList()
{
ShowGPSList=!ShowGPSList;
if(ShowGPSList)
StatusDisplays.Caption="Driver Assisting System\\\\GPS Track ";
else
StatusDisplays.Caption="Driver Assisting System\\\\Status ";
}

//-------------------------------------------------------------------
void Load()
{
MyIni config=new MyIni();
if(config.TryParse(Parent.Storage))
{
if(config.ContainsSection("General"))
{
config.Get("General","Run").TryGetBoolean(out Run);
config.Get("General","JumpJets").TryGetBoolean(out _UseJumpJets);
config.Get("General","HDC").TryGetBoolean(out _UseHillDescentControl);
config.Get("General","Odometer").TryGetDouble(out Odometer);
}
if(config.ContainsSection("Autopilot"))
{
config.Get("Autopilot","Enabled").TryGetBoolean(out Autopilot.Enabled);
config.Get("Autopilot","WaitTime").TryGetDouble(out _AutopilotWait);
config.Get("Autopilot","Accuracy").TryGetDouble(out _AutopilotAccuracy);
config.Get("Autopilot","WaypointIndex").TryGetInt32(out Autopilot.WaypointIndx);
config.Get("Autopilot","WaypointSelector").TryGetInt32(out Autopilot.WaypointSelector);
int t=(int)Autopilot.DriveMode;
config.Get("Autopilot","DriveMode").TryGetInt32(out t);
Autopilot.DriveMode=(AutopilotDriver.EDriveMode)t;
}
}
}

IEnumerator&lt;bool&gt; Boot()
{
Parent.Runtime.UpdateFrequency=UpdateFrequency.Update10;
StringQueue bootLog=new StringQueue(15);
StringBuilder failList=new StringBuilder("\n");
IMyTextSurface myLCD=(Parent.Me as IMyTextSurfaceProvider).GetSurface(0);
NavgtnDisplays.DetectBlocks();
StatusDisplays.DetectBlocks();
if(NavgtnDisplays.Ready||StatusDisplays.Ready)
{
StatusDisplays.Caption=NavgtnDisplays.Caption="Driver Assisting System\\\\Booting... ";
bootLog.Append("DAS.DisplayScheduler...   ok");
}
else
{
bootLog.Append("DAS.DisplayScheduler...   failure");
failList.Append("DAS.DisplayScheduler failure\n");
}
BootPrint(bootLog.GetString(),myLCD);
yield return true;
VehicleDynamics.ForceDetectRemoteControl();
if(!VehicleDynamics.Ready)
{
bootLog.Append("DAS.GridDynamicsWatcher...   failure\n\nCritical failure during boot:\nNo Remote Control Block found.");
Parent.Runtime.UpdateFrequency=UpdateFrequency.Update100;
BootPrint(bootLog.GetString(),myLCD);
yield break;
}
IMyRemoteControl rc=VehicleMass.RC=Gravity.RC=Orientation.RC=VehicleDynamics.RC;
VehicleMass.InitMasses();
for(int i=0;i&lt;=Gravity.SkipCycles;++i)
Gravity.Update();
for(int i=0;i&lt;=Orientation.SkipCycles;++i)
Orientation.Update(Gravity.Direction,true);
bootLog.Append("DAS.GridMassWatcher...   ok");
bootLog.Append("DAS.GravityWatcher...   ok");
bootLog.Append("DAS.OrientationComputer...   ok");
bootLog.Append("DAS.GridDynamicsWatcher...   ok");
BootPrint(bootLog.GetString(),myLCD);
yield return true;
UserInput.DetectFuncBlocks();
bootLog.Append("DAS.UserInputWatcher...   ok");
BootPrint(bootLog.GetString(),myLCD);
yield return true;
Cameras.DetectBlocks(rc);
if(Cameras.Ready)
{
for(int i=0;i&lt;(Cameras.SkipCycles+2)*2;++i)
Cameras.Update();
bootLog.Append("DAS.CameraScheduler...   ok");
}
else
{
bootLog.Append("DAS.CameraScheduler...   failure");
failList.Append("DAS.CameraScheduler failure\n");
}
BootPrint(bootLog.GetString(),myLCD);
yield return true;
TCS.DetectBlocks(rc);
if(TCS.Ready)
bootLog.Append("DAS.TCS...   ok");
else
{
bootLog.Append("DAS.TCS...   failure");
failList.Append("DAS.TCS failure\n");
}
BootPrint(bootLog.GetString(),myLCD);
yield return true;
FDS.DetectBlocks(rc);
if(FDS.Ready)
bootLog.Append("DAS.FDS...   ok");
else
{
bootLog.Append("DAS.FDS...   failure");
failList.Append("DAS.FDS failure\n");
}
BootPrint(bootLog.GetString(),myLCD);
yield return true;
GSA.DetectBlocks(rc);
RelayTCSDataToGSA();
if(GSA.Ready)
{
for(int i=0;i&lt;=GSA.SkipCycles;++i)
GSA.Update();
bootLog.Append("DAS.GSA...   ok");
}
else
{
bootLog.Append("DAS.GSA...   failure");
failList.Append("DAS.GSA failure\n");
}
BootPrint(bootLog.GetString(),myLCD);
yield return true;
SDO.DetectBlocks(rc);
if(SDO.Ready)
bootLog.Append("DAS.SDO...   ok");
else
{
bootLog.Append("DAS.SDO...   failure");
failList.Append("DAS.SDO failure\n");
}
BootPrint(bootLog.GetString(),myLCD);
yield return true;
Lights.DetectBlocks(rc);
if(Lights.Ready)
bootLog.Append("DAS.LightsManager...   ok");
else
{
bootLog.Append("DAS.LightsManager...   failure");
failList.Append("DAS.LightsManager failure\n");
}
BootPrint(bootLog.GetString(),myLCD);
yield return true;
AutoBrakes.RC=CruiseControl.RC=GPSTracker.RC=rc;
bootLog.Append("DAS.AutoHandbrakesSubroutine...   ok");
ArtMass.DetectBlocks();
Autopilot.DetectBlocks(rc);
if(ArtMass.Ready)
bootLog.Append("DAS.ArtificialMassSubroutine...   ok");
else
bootLog.Append("DAS.ArtificialMassSubroutine...   failure");
bootLog.Append("DAS.AutopilotDriver...   ok");
bootLog.Append("DAS.CruiseControlSubroutine...   ok");
bootLog.Append("DAS.GPSTrackerSubroutine...   ok");
BootPrint(bootLog.GetString(),myLCD);
yield return true;
ConnectorSubrtn.DetectBlocks(rc);
if(ConnectorSubrtn.Ready)
bootLog.Append("DAS.ConnectorSubroutine...   ok");
else
bootLog.Append("DAS.ConnectorSubroutine...   failure");
BootPrint(bootLog.GetString(),myLCD);
yield return true;
BackupBeeper.DetectBlocks();
if(BackupBeeper.Ready)
bootLog.Append("DAS.BackupBeeperSubroutine...   ok");
else
bootLog.Append("DAS.BackupBeeperSubroutine...   failure");
BootPrint(bootLog.GetString(),myLCD);
yield return true;
NavgtnDisplays.Caption="Driver Assisting System\\\\Navigation ";
StatusDisplays.Caption="Driver Assisting System\\\\Status ";
Profiler.Memo=failList.ToString();
Busy=false;
Booted=true;
}

string textDASshutdown="\n\n\n\n                         DAS shutdown";
string textDASstandby="\n\n\n\n                         DAS standby";
StringBuilder ComposeNavigationData(int i=0)
{
StrN.Clear();
if(!Run)
StrN.Append(textDASshutdown);
else if(ConnectorSubrtn.IsConnected)
StrN.Append(textDASstandby);
else
{
StrN.AppendFormat("\nLocation:\nGPS:{0}:",Parent.Me.CubeGrid.CustomName);
StrN.AppendFormat("{0:F2}:",Parent.Me.CubeGrid.WorldVolume.Center.X);
StrN.AppendFormat("{0:F2}:",Parent.Me.CubeGrid.WorldVolume.Center.Y);
StrN.AppendFormat("{0:F2}:",Parent.Me.CubeGrid.WorldVolume.Center.Z);
StrN.AppendFormat(":\n\nLateral velocity:    {0,-1:N2} km/h\nVertical velocity:   {1,-1:N2} m/s\nAcceleration:         {2,-1:N1} m/c^2\nTraveled distance: {3,-1:N1} km",
VehicleDynamics.Velocity.Forward*3.6,
VehicleDynamics.Velocity.Up,
VehicleDynamics.Acceleration.AvrEMA,
Odometer/1000.0);
StrN.AppendFormat("\n\nPitch: {0,-1:F2}°\nYaw:  {1,-1:F2}°\nRoll:   {2,-1:F2}°",
MathHelperD.ToDegrees(Orientation.Pitch)-_NaturalPitchDegree,
MathHelperD.ToDegrees(Orientation.Yaw),
MathHelperD.ToDegrees(Orientation.Roll));
}
return StrN;
}

[Flags]
enum WarningFlags : byte {None,GSA,FDS,HDC=4}
WarningFlags Warns;
StringBuilder ComposeStatusData(int i=0)
{
StrS.Clear();
if(!Run)
StrS.Append(textDASshutdown);
else if(ConnectorSubrtn.IsConnected)
StrS.Append(textDASstandby);
else if(ShowGPSList)
return GPSTracker.GPSTrackList;
else
{
StrS.Append("                             Systems\n");
if(TCS.Ready)
{
if(TCS.Enabled)
StrS.Append("          [ TCS ]");
else
StrS.Append("            TCS  ");
}
else
StrS.Append("          [         ]");
if(GSA.Ready)
{
if(GSA.Enabled)
{
if(GSA.IsAllGyrosWorking||i % 2==0)
StrS.Append("          [ GSA ]");
else
StrS.Append("          [         ]");
}
else
StrS.Append("            GSA  ");
}
else
StrS.Append("          [         ]");
if(FDS.Ready)
{
if(FDS.Enabled)
{
if(FDS.EnoughThrust||i % 2==0)
StrS.Append("          [ FDS ]");
else
StrS.Append("          [         ]");
}
else
StrS.Append("            FDS  ");
}
else
StrS.Append("          [         ]");
StrS.Append("\n");
if(SDO.Ready)
{
if(SDO.Enabled)
StrS.Append("          [ SDO ]");
else
StrS.Append("            SDO  ");
}
else
StrS.Append("          [         ]");
if(Lights.Ready)
{
if(Lights.Enabled)
StrS.Append("          [LGHT]");
else
StrS.Append("           LGHT ");
}
else
StrS.Append("          [         ]");
StrS.Append("\n");
if(Warns==WarningFlags.None)
{
if(GSA.Ready&amp;&amp;GSA.Enabled&amp;&amp;!GSA.IsAllGyrosWorking)
Warns |= WarningFlags.GSA;
if(FDS.Ready&amp;&amp;FDS.Enabled&amp;&amp;!FDS.EnoughThrust)
Warns |= WarningFlags.FDS;
if(TCS.UseHillDescentControl&amp;&amp;!_UseHillDescentControl)
Warns |= WarningFlags.HDC;
}
if(Warns.HasFlag(WarningFlags.GSA))
{
StrS.Append("   GSA: Some gyros disabled or damaged.\n");
if(i % 4==0)
Warns ^= WarningFlags.GSA;
}
else if(Warns.HasFlag(WarningFlags.FDS))
{
StrS.Append("   FDS: Not enough thrust.\n");
if(i % 4==0)
Warns ^= WarningFlags.FDS;
}
else if(Warns.HasFlag(WarningFlags.HDC))
{
StrS.Append("   DAS: HDC activated by autopilot.\n");
if(i % 4==0)
Warns ^= WarningFlags.HDC;
}
else
StrS.Append("\n");
switch(_HandbrakeMode)
{
case HandbrakeMode.Semi:
StrS.Append("          [SEMI]");
break;
case HandbrakeMode.Auto:
StrS.Append("          [AUTO]");
break;
case HandbrakeMode.Off:
StrS.Append("          [         ]");
break;
}
if(_UseJumpJets)
StrS.Append("          [JUMP]");
else
StrS.Append("          [         ]");
if(TCS.UseHillDescentControl&amp;&amp;(_UseHillDescentControl||i % 2==0))
StrS.Append("          [ HDC ]");
else
StrS.Append("          [         ]");
StrS.Append("\n");
if(CruiseControl.Enabled)
StrS.Append("          [  CC  ]");
else
StrS.Append("          [         ]");
if(GPSTracker.Enabled&amp;&amp;i % 2==0)
StrS.Append("          [¤REC]");
else
StrS.Append("          [         ]");
StrS.Append("\n_________________________________________________________\n");
StrS.AppendFormat("Autopilot:              {0}\n",Autopilot.Enabled ? "ACTIVE" : "OFF");
StrS.AppendFormat("Accuracy:              {0}\n",_AutopilotAccuracy);
StrS.Append("Wait time:              ");
if(Autopilot.Time&gt;=1)
StrS.AppendFormat("{0}/",Math.Floor(Autopilot.Time));
StrS.AppendFormat("{0} sec\n",_AutopilotWait);
switch(Autopilot.DriveMode)
{
case AutopilotDriver.EDriveMode.OneWay:
StrS.Append("Drive Mode:           ONE WAY\n");
break;
case AutopilotDriver.EDriveMode.Patrol:
StrS.Append("Drive Mode:           PATROL\n");
break;
case AutopilotDriver.EDriveMode.Cicrle:
StrS.Append("Drive Mode:           CIRCLE\n");
break;
}
StrS.Append("Route:\n");
if(Autopilot.Enabled)
{
StrS.AppendFormat("{0} {1} {2}\n",
Autopilot.FirstWaypoint.Name,
i % 3==0 ? "&gt;--&gt;" : i % 3==1 ? "-&gt;--" : "--&gt;-",
Autopilot.LastWaypoint.Name);
}
else
StrS.Append("N/A\n");
StrS.Append("Current Waypoint:\n");
StrS.AppendFormat("{0}\n",Autopilot.Enabled ? Autopilot.CurrentWaypoint.ToString() : "N/A");
}
return StrS;
}

void BootPrint(StringBuilder str,IMyTextSurface pbLCD)
{
NavgtnDisplays.ForcePrint(str);
StatusDisplays.ForcePrint(str);
Parent.Echo(str.ToString());
pbLCD?.WriteText(str);
}

void ReleaseAllOverrides()
{
try
{
TCS.ReleaseControl();
FDS.ReleaseControl();
GSA.ReleaseControl();
SDO.ReleaseControl();
Lights.ReleaseControl();
}
finally {}
}

void SetAutopilotControl()
{
CruiseControl.Enabled=false;
GPSTracker.Enabled=false;
TCS.SetInputSource(Autopilot);
TCS.ForceFullOverride=true;
TCS.UseHillDescentControl=true;
TCS.ForwardSpeedLimitKPH=TCS.BackwardSpeedLimitKPH=_AutopilotSpeedLimitKMP;
GSA.SetInputSource(Autopilot);
SDO.SetInputSource(Autopilot);
AutoBrakes.SetInputSource(Autopilot);
Lights.SetInputSource(Autopilot);
}

void SetCruiseControl()
{
Autopilot.Enabled=false;
GPSTracker.Enabled=false;
TCS.SetInputSource(CruiseControl);
TCS.ForceFullOverride=true;
TCS.UseHillDescentControl=_UseHillDescentControl;
GSA.SetInputSource(CruiseControl);
SDO.SetInputSource(CruiseControl);
AutoBrakes.SetInputSource(CruiseControl);
Lights.SetInputSource(CruiseControl);
}

void SetUserControl()
{
TCS.SetInputSource(UserInput);
TCS.ForceFullOverride=false;
TCS.UseHillDescentControl=_UseHillDescentControl;
TCS.ForwardSpeedLimitKPH=_FrwrdSpeedLimitKPH;
TCS.BackwardSpeedLimitKPH=_BckwrdSpeedLimitKPH;
TCS.ReleaseControl();
GSA.SetInputSource(UserInput);
SDO.SetInputSource(UserInput);
AutoBrakes.SetInputSource(UserInput);
Lights.SetInputSource(UserInput);
}

void RelayTCSDataToGSA()
{
GSA.CoMToWheelsBaseAngle=TCS.CoMToWheelsBaseAngle;
GSA.VehicleTurnRadiusLeft=TCS.VehicleTurnRadiusLeft;
GSA.VehicleTurnRadiusRight=TCS.VehicleTurnRadiusRight;
}

}
//-------------------------------------------------------------------

DriverAssistingSystem DAS;

public Program()
{
DAS=new DriverAssistingSystem(this);
}

public void Save()
{
if(DAS.Run)
DAS.Save();
}

public void Main(string args,UpdateType updateSource)
{
if(updateSource.HasFlag(UpdateType.Terminal)||updateSource.HasFlag(UpdateType.Trigger))
{
StringComparison ic=StringComparison.OrdinalIgnoreCase;
if(args.Equals("START",ic))
DAS.Start();
else if(args.Equals("STOP",ic))
{
DAS.Stop();
DAS.Save();
}
else if(args.Equals("STARTSTOP",ic))
{
if(DAS.Run)
DAS.Stop();
else
DAS.Start();
DAS.Save();
}
else if(args.Equals("LOW_MODE",ic))
{
DAS.SuspensionValueChangeRate=60;
DAS.SuspensionHeightOffset=0;
}
else if(args.Equals("HIGH_MODE",ic))
{
DAS.SuspensionValueChangeRate=15;
DAS.SuspensionHeightOffset=-1.5;
}
else if(args.Equals("RESET_ODOMETER",ic))
{
DAS.Odometer=0;
DAS.Save();
}
else if(args.Equals("CYCLE_HANDBRAKES",ic))
DAS.ChangeHandbrakeMode();
else if(args.Equals("TOGGLE_JUMPJETS",ic))
DAS.UseJumpJets=!DAS.UseJumpJets;
else if(args.Equals("TOGGLE_GSA",ic))
DAS.UseGSA=!DAS.UseGSA;
else if(args.Equals("TOGGLE_HDC",ic))
DAS.UseHillDescentControl=!DAS.UseHillDescentControl;
else if(args.Equals("TOGGLE_AUTOPILOT",ic))
DAS.ToggleAutopilot();
else if(args.Equals("RESUME_AUTOPILOT",ic))
DAS.ToggleAutopilot(false);
else if(args.Equals("CYCLE_AUTOPILOT_ACC",ic))
DAS.AutopilotAccuracy=DAS.AutopilotAccuracy % 2.5+0.25;
else if(args.Equals("CYCLE_AUTOPILOT_WAIT",ic))
DAS.AutopilotWait=(DAS.AutopilotWait+5) % 65;
else if(args.Equals("CYCLE_AUTOPILOT_MODE",ic))
DAS.ChangeAutopilotDriveMode();
else if(args.Equals("INVERSE_AUTOPILOT",ic))
DAS.InverseAutopilot();
else if(args.Equals("TOGGLE_CRUISECONTROL",ic))
DAS.ToggleCruiseControl();
else if(args.Equals("TOGGLE_GPSTRACKER",ic))
DAS.ToggleGPSTracker();
else if(args.Equals("TOGGLE_GPSLIST",ic))
DAS.ToggleGPSList();
}
else
{
DAS.Update(updateSource);
}
}
</Program>
              <Storage />
              <TextPanels>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <Text>DAS - Driver Assisting System  --

DAS.DisplayScheduler failure
DAS.CameraScheduler failure
DAS.FDS failure
DAS.SDO failure
DAS.LightsManager failure

Instructions used: 144/50000
Average(EMA) run time: 0.023 ms
Last run time: 0.027 ms
_</Text>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <SelectedScript />
                  <TextPadding>2</TextPadding>
                  <ScriptBackgroundColor>
                    <PackedValue>4288108544</PackedValue>
                    <X>0</X>
                    <Y>88</Y>
                    <Z>151</Z>
                    <R>0</R>
                    <G>88</G>
                    <B>151</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <SelectedScript />
                  <TextPadding>2</TextPadding>
                  <ScriptBackgroundColor>
                    <PackedValue>4288108544</PackedValue>
                    <X>0</X>
                    <Y>88</Y>
                    <Z>151</Z>
                    <R>0</R>
                    <G>88</G>
                    <B>151</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
              </TextPanels>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Gyro">
              <SubtypeName>SmallBlockGyro</SubtypeName>
              <EntityId>96540900164840338</EntityId>
              <Min x="-1" y="8" z="8" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Gyroscope</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <GyroPower>0.2</GyroPower>
              <GyroOverride>true</GyroOverride>
              <TargetAngularVelocity x="-0.00137572631" y="-0" z="-0.0104216067" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Gyro">
              <SubtypeName>SmallBlockGyro</SubtypeName>
              <EntityId>116996495601129471</EntityId>
              <Min x="1" y="8" z="8" />
              <BlockOrientation Forward="Left" Up="Up" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Gyroscope 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <GyroPower>0.2</GyroPower>
              <GyroOverride>true</GyroOverride>
              <TargetAngularVelocity x="0.0104216067" y="-0" z="-0.00137572631" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_HydrogenEngine">
              <SubtypeName>SmallHydrogenEngine</SubtypeName>
              <EntityId>128870037983687274</EntityId>
              <Min x="-1" y="7" z="3" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Hydrogen Engine 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Capacity>5000.733</Capacity>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Conveyor">
              <SubtypeName>SmallBlockConveyor</SubtypeName>
              <EntityId>101582521882261374</EntityId>
              <Min x="-2" y="6" z="7" />
              <BlockOrientation Forward="Up" Up="Left" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OxygenTank">
              <SubtypeName>SmallHydrogenTankSmall</SubtypeName>
              <EntityId>128910873072819172</EntityId>
              <Min x="-2" y="6" z="8" />
              <BlockOrientation Forward="Right" Up="Up" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>0.12</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Small Hydrogen Tank</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsStockpiling>false</IsStockpiling>
              <FilledRatio>0.9679545</FilledRatio>
              <AutoRefill>false</AutoRefill>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OxygenTank">
              <SubtypeName>SmallHydrogenTankSmall</SubtypeName>
              <EntityId>93799653842578018</EntityId>
              <Min x="-2" y="6" z="5" />
              <BlockOrientation Forward="Right" Up="Up" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>0.12</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Small Hydrogen Tank 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsStockpiling>false</IsStockpiling>
              <FilledRatio>0.9679545</FilledRatio>
              <AutoRefill>false</AutoRefill>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Conveyor">
              <SubtypeName>SmallBlockConveyor</SubtypeName>
              <EntityId>90541541873624177</EntityId>
              <Min x="2" y="6" z="7" />
              <BlockOrientation Forward="Up" Up="Right" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OxygenTank">
              <SubtypeName>SmallHydrogenTankSmall</SubtypeName>
              <EntityId>80279738257995566</EntityId>
              <Min x="2" y="6" z="5" />
              <BlockOrientation Forward="Right" Up="Up" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>0.12</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Small Hydrogen Tank 3</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsStockpiling>false</IsStockpiling>
              <FilledRatio>0.9679545</FilledRatio>
              <AutoRefill>false</AutoRefill>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OxygenTank">
              <SubtypeName>SmallHydrogenTankSmall</SubtypeName>
              <EntityId>79100863826893684</EntityId>
              <Min x="2" y="6" z="8" />
              <BlockOrientation Forward="Right" Up="Up" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>0.12</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Small Hydrogen Tank 4</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsStockpiling>false</IsStockpiling>
              <FilledRatio>0.9679545</FilledRatio>
              <AutoRefill>false</AutoRefill>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>100987466294016429</EntityId>
              <Min x="0" y="8" z="8" />
              <BlockOrientation Forward="Left" Up="Up" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Timer Block 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Shoot_Off</Action>
                      <BlockEntityId>102062881765568796</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>2000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Beacon">
              <SubtypeName>SmallBlockBeacon</SubtypeName>
              <EntityId>95522485292397083</EntityId>
              <Min x="0" y="9" z="8" />
              <BlockOrientation Forward="Down" Up="Right" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Beacon</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <BroadcastRadius>5000</BroadcastRadius>
              <HudText />
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <Skeleton>
            <BoneInfo>
              <BonePosition x="-1" y="14" z="45" />
              <BoneOffset x="129" y="116" z="107" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-1" y="14" z="46" />
              <BoneOffset x="132" y="104" z="107" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-1" y="12" z="46" />
              <BoneOffset x="120" y="152" z="106" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-1" y="12" z="45" />
              <BoneOffset x="130" y="139" z="148" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="14" z="45" />
              <BoneOffset x="133" y="122" z="150" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="15" z="45" />
              <BoneOffset x="132" y="128" z="144" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="12" z="45" />
              <BoneOffset x="116" y="145" z="155" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="12" z="45" />
              <BoneOffset x="130" y="136" z="151" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="12" z="46" />
              <BoneOffset x="107" y="147" z="147" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="11" z="46" />
              <BoneOffset x="111" y="133" z="97" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="11" z="45" />
              <BoneOffset x="117" y="130" z="122" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="13" z="45" />
              <BoneOffset x="117" y="127" z="145" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="15" z="46" />
              <BoneOffset x="115" y="123" z="103" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="14" z="46" />
              <BoneOffset x="105" y="101" z="101" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="15" z="45" />
              <BoneOffset x="117" y="125" z="130" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="13" z="46" />
              <BoneOffset x="100" y="120" z="98" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="12" z="45" />
              <BoneOffset x="129" y="135" z="114" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="14" z="45" />
              <BoneOffset x="110" y="118" z="142" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="12" z="46" />
              <BoneOffset x="131" y="144" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="14" z="46" />
              <BoneOffset x="124" y="112" z="152" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="14" z="45" />
              <BoneOffset x="127" y="116" z="121" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="11" z="45" />
              <BoneOffset x="145" y="127" z="149" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="13" z="45" />
              <BoneOffset x="139" y="127" z="131" />
            </BoneInfo>
          </Skeleton>
          <LinearVelocity x="0.0619164333" y="0.02888935" z="-0.008020995" />
          <AngularVelocity x="-0.00076486246" y="-0.01055655" z="-0.00367395254" />
          <ConveyorLines>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="4" z="6" />
              <StartDirection>Up</StartDirection>
              <EndPosition x="0" y="5" z="6" />
              <EndDirection>Down</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="-1" y="6" z="7" />
              <StartDirection>Left</StartDirection>
              <EndPosition x="-2" y="6" z="7" />
              <EndDirection>Right</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="1" y="6" z="7" />
              <StartDirection>Right</StartDirection>
              <EndPosition x="2" y="6" z="7" />
              <EndDirection>Left</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="7" z="6" />
              <StartDirection>Up</StartDirection>
              <EndPosition x="0" y="8" z="6" />
              <EndDirection>Down</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="6" z="7" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="0" y="6" z="8" />
              <EndDirection>Forward</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="6" z="10" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="0" y="6" z="11" />
              <EndDirection>Forward</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="6" z="13" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="0" y="6" z="14" />
              <EndDirection>Forward</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="6" z="16" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="0" y="6" z="17" />
              <EndDirection>Forward</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="6" z="19" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="0" y="6" z="20" />
              <EndDirection>Forward</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="-1" y="6" z="18" />
              <StartDirection>Left</StartDirection>
              <EndPosition x="-3" y="7" z="18" />
              <EndDirection>Down</EndDirection>
              <Sections>
                <Section Direction="Left" Length="2" />
                <Section Direction="Up" Length="1" />
              </Sections>
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="7" z="21" />
              <StartDirection>Up</StartDirection>
              <EndPosition x="0" y="8" z="21" />
              <EndDirection>Down</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="10" z="21" />
              <StartDirection>Up</StartDirection>
              <EndPosition x="0" y="11" z="21" />
              <EndDirection>Down</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="9" z="22" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="0" y="9" z="23" />
              <EndDirection>Forward</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="8" z="5" />
              <StartDirection>Forward</StartDirection>
              <EndPosition x="0" y="8" z="4" />
              <EndDirection>Backward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="-2" y="6" z="7" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="-2" y="6" z="8" />
              <EndDirection>Forward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="-2" y="6" z="7" />
              <StartDirection>Forward</StartDirection>
              <EndPosition x="-2" y="6" z="6" />
              <EndDirection>Backward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="2" y="6" z="7" />
              <StartDirection>Forward</StartDirection>
              <EndPosition x="2" y="6" z="6" />
              <EndDirection>Backward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="2" y="6" z="7" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="2" y="6" z="8" />
              <EndDirection>Forward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
          </ConveyorLines>
          <Handbrake>true</Handbrake>
          <DisplayName>Paolo.SAM</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>123247940488279950</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="56391.647926169251" y="21162.118204583359" z="-9526.69299291689" />
            <Forward x="-0.04391812" y="0.996011" z="0.07767539" />
            <Up x="0.193842918" y="-0.0677772" z="0.9786886" />
            <Orientation>
              <X>0.72895503</X>
              <Y>0.08638458</Y>
              <Z>-0.0501316562</Z>
              <W>0.6772364</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>OffroadSmallRealWheel5x5</SubtypeName>
              <EntityId>113358284219231848</EntityId>
              <BuiltBy>144115188075855914</BuiltBy>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="-0.0371976234" y="-0.0037223734" z="0.00338486023" />
          <AngularVelocity x="-0.00267169368" y="0.00167511741" z="0.0106924707" />
          <DisplayName>Small Grid 9950</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>79095867430486806</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="56391.725411104657" y="21162.89956754473" z="-9531.1705042240646" />
            <Forward x="-0.7245277" y="0.659981966" z="0.198705614" />
            <Up x="-0.194606617" y="0.08068149" z="-0.9775577" />
            <Orientation>
              <X>-0.337943047</X>
              <Y>0.696525156</Y>
              <Z>-0.5877531</Z>
              <W>0.234932885</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>OffroadSmallRealWheel5x5mirrored</SubtypeName>
              <EntityId>87617002996000936</EntityId>
              <BuiltBy>144115188075855914</BuiltBy>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="-0.0243797265" y="0.000432094559" z="0.007521474" />
          <AngularVelocity x="-0.00172223093" y="0.0009186971" z="0.0019401653" />
          <DisplayName>Small Grid 6806</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>88123012111010077</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="56391.879449390159" y="21162.58951123169" z="-9526.7062762058013" />
            <Forward x="-0.5919813" y="-0.8037975" z="0.05888802" />
            <Up x="0.198147237" y="-0.07432886" z="0.977350056" />
            <Orientation>
              <X>0.296648949</X>
              <Y>0.664412</Y>
              <Z>0.670196831</Z>
              <W>0.1462608</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>OffroadSmallRealWheel5x5</SubtypeName>
              <EntityId>92710695585814345</EntityId>
              <BuiltBy>144115188075855914</BuiltBy>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="-0.0185759887" y="0.00507286936" z="0.00449477043" />
          <AngularVelocity x="0.005839522" y="-0.006760126" z="-0.00303989369" />
          <DisplayName>Small Grid 77</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>115241961390112371</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="56393.410166806476" y="21156.956412087056" z="-9527.38170642499" />
            <Forward x="-0.788057745" y="-0.602487743" z="0.126386613" />
            <Up x="0.197923928" y="-0.0535684936" z="0.9787526" />
            <Orientation>
              <X>0.386341482</X>
              <Y>0.6433767</Y>
              <Z>0.6144302</Z>
              <W>0.243479416</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>OffroadSmallRealWheel5x5</SubtypeName>
              <EntityId>143536059057947091</EntityId>
              <BuiltBy>144115188075855914</BuiltBy>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="-0.04959311" y="0.0110114217" z="-0.00306293368" />
          <AngularVelocity x="0.00328298821" y="0.00270280149" z="-0.008989035" />
          <DisplayName>Small Grid 2371</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>129650483712474515</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="56393.648479844953" y="21154.471428097004" z="-9532.1488061779055" />
            <Forward x="0.622747242" y="-0.763807535" z="-0.169658855" />
            <Up x="-0.196931481" y="0.0568443239" z="-0.978768051" />
            <Orientation>
              <X>-0.61861366</X>
              <Y>-0.180243641</Y>
              <Z>0.2981527</Z>
              <W>0.7042261</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>OffroadSmallRealWheel5x5mirrored</SubtypeName>
              <EntityId>84320920427081690</EntityId>
              <BuiltBy>144115188075855914</BuiltBy>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="-0.0134808868" y="0.01643656" z="-0.0104796775" />
          <AngularVelocity x="-0.000448628329" y="-0.005704632" z="-0.000407799729" />
          <DisplayName>Small Grid 4515</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>134744706193428343</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="56395.8737780262" y="21166.599182047157" z="-9528.97208254648" />
            <Forward x="-0.315377563" y="0.93994534" z="0.13053897" />
            <Up x="-0.19654198" y="0.06987907" z="-0.9780023" />
            <Orientation>
              <X>-0.1818445</X>
              <Y>0.7295218</Y>
              <Z>-0.6572617</Z>
              <W>0.0523209535</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorAdvancedRotor">
              <SubtypeName>MediumHingeHead</SubtypeName>
              <EntityId>135668425651942564</EntityId>
              <BuiltBy>144115188075855914</BuiltBy>
              <ParentEntityId>92213184052633281</ParentEntityId>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ShipConnector">
              <SubtypeName>ConnectorMedium</SubtypeName>
              <EntityId>112438994457619578</EntityId>
              <Min x="-2" y="0" z="0" />
              <BlockOrientation Forward="Left" Up="Down" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <DeformationRatio>0.5</DeformationRatio>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>1.152</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyTimerComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_TimerComponent">
                      <Repeat>true</Repeat>
                      <TimeToEvent>0</TimeToEvent>
                      <SetTimeMinutes>0</SetTimeMinutes>
                      <TimerEnabled>true</TimerEnabled>
                      <RemoveEntityOnTimer>false</RemoveEntityOnTimer>
                      <TimerType>Frame10</TimerType>
                      <FramesFromLastTrigger>10</FramesFromLastTrigger>
                      <TimerTickInFrames>80</TimerTickInFrames>
                      <IsSessionUpdateEnabled>false</IsSessionUpdateEnabled>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Connector</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <MasterToSlaveTransform xsi:nil="true" />
              <MasterToSlaveGrid xsi:nil="true" />
              <IsMaster>true</IsMaster>
              <TradingEnabled>false</TradingEnabled>
              <AutoUnlockTime>0</AutoUnlockTime>
              <TimeOfConnection>0</TimeOfConnection>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="-0.04291779" y="0.0110574886" z="0.008011994" />
          <AngularVelocity x="0.005045157" y="0.006589946" z="0.0243012682" />
          <ConveyorLines>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="1" z="1" />
              <StartDirection>Left</StartDirection>
              <EndPosition x="-1" y="1" z="1" />
              <EndDirection>Right</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
          </ConveyorLines>
          <DisplayName>Small Grid 8343</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>121139570163029684</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="56393.362243041352" y="21163.827814129025" z="-9530.710581301073" />
            <Forward x="0.597550154" y="-0.7822852" z="-0.175965592" />
            <Up x="0.196472064" y="-0.06991673" z="0.9780136" />
            <Orientation>
              <X>-0.170706481</X>
              <Y>0.6187701</Y>
              <Z>0.7112086</Z>
              <W>-0.2866446</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorAdvancedRotor">
              <SubtypeName>SmallHingeHead</SubtypeName>
              <EntityId>82740918848203530</EntityId>
              <BuiltBy>144115188075855914</BuiltBy>
              <ParentEntityId>96023860603321878</ParentEntityId>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Conveyor">
              <SubtypeName>SmallBlockConveyor</SubtypeName>
              <EntityId>73878348112520086</EntityId>
              <Min x="-1" y="0" z="0" />
              <BlockOrientation Forward="Down" Up="Left" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ConveyorConnector">
              <SubtypeName>ConveyorTubeSmall</SubtypeName>
              <EntityId>137771144730899567</EntityId>
              <Min x="-1" y="0" z="1" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ConveyorConnector">
              <SubtypeName>ConveyorTubeSmall</SubtypeName>
              <EntityId>129556840629266101</EntityId>
              <Min x="-1" y="0" z="2" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ConveyorConnector">
              <SubtypeName>ConveyorTubeSmall</SubtypeName>
              <EntityId>74249172478472609</EntityId>
              <Min x="-1" y="0" z="3" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ConveyorConnector">
              <SubtypeName>ConveyorTubeSmall</SubtypeName>
              <EntityId>142818884390894917</EntityId>
              <Min x="-1" y="0" z="4" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ConveyorConnector">
              <SubtypeName>ConveyorTubeSmallCurved</SubtypeName>
              <EntityId>108554953343962293</EntityId>
              <Min x="-1" y="0" z="5" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_SmallGatlingGun">
              <SubtypeName />
              <EntityId>102062881765568796</EntityId>
              <Min x="-2" y="0" z="2" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>39</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_AmmoMagazine">
                            <SubtypeName>NATO_25x184mm</SubtypeName>
                            <ProjectilesCount>0</ProjectilesCount>
                          </PhysicalContent>
                          <ItemId>0</ItemId>
                        </MyObjectBuilder_InventoryItem>
                      </Items>
                      <nextItemId>1</nextItemId>
                      <Volume>0.064</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Gatling Gun</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsShooting>false</IsShooting>
              <IsShootingFromTerminal>false</IsShootingFromTerminal>
              <IsLargeTurret>false</IsLargeTurret>
              <MinFov>0.1</MinFov>
              <MaxFov>1.04719758</MaxFov>
              <GunBase>
                <RemainingAmmo>25</RemainingAmmo>
                <CurrentAmmoMagazineName>NATO_25x184mm</CurrentAmmoMagazineName>
                <RemainingAmmosList />
                <LastShootTime>637444669173080172</LastShootTime>
              </GunBase>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
              <SubtypeName>SmallBlockSmallHydrogenThrust</SubtypeName>
              <EntityId>119263352187480575</EntityId>
              <Min x="-4" y="0" z="1" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <BuiltBy>144115188075855914</BuiltBy>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyTimerComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_TimerComponent">
                      <Repeat>true</Repeat>
                      <TimeToEvent>0</TimeToEvent>
                      <SetTimeMinutes>0</SetTimeMinutes>
                      <TimerEnabled>false</TimerEnabled>
                      <RemoveEntityOnTimer>false</RemoveEntityOnTimer>
                      <TimerType>Frame100</TimerType>
                      <FramesFromLastTrigger>0</FramesFromLastTrigger>
                      <TimerTickInFrames>100</TimerTickInFrames>
                      <IsSessionUpdateEnabled>false</IsSessionUpdateEnabled>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Hydrogen Thruster 4 R</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <ThrustOverride>98400</ThrustOverride>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Warhead">
              <SubtypeName>SmallWarhead</SubtypeName>
              <EntityId>121499582244597971</EntityId>
              <Min x="-4" y="0" z="-3" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Warhead 4</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <CountdownMs>10000</CountdownMs>
              <IsArmed>true</IsArmed>
              <IsCountingDown>false</IsCountingDown>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OxygenTank">
              <SubtypeName>SmallHydrogenTankSmall</SubtypeName>
              <EntityId>90322105397581187</EntityId>
              <Min x="-5" y="0" z="-2" />
              <BlockOrientation Forward="Down" Up="Left" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>0.12</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Small Hydrogen Tank 4 R</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsStockpiling>true</IsStockpiling>
              <FilledRatio>1</FilledRatio>
              <AutoRefill>false</AutoRefill>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ConveyorConnector">
              <SubtypeName>ConveyorTubeSmall</SubtypeName>
              <EntityId>136079684249387318</EntityId>
              <Min x="-2" y="0" z="0" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Conveyor">
              <SubtypeName>SmallBlockConveyor</SubtypeName>
              <EntityId>91396677490156368</EntityId>
              <Min x="-4" y="0" z="0" />
              <BlockOrientation Forward="Up" Up="Left" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ConveyorConnector">
              <SubtypeName>ConveyorTubeSmall</SubtypeName>
              <EntityId>137187686343737889</EntityId>
              <Min x="-3" y="0" z="0" />
              <BlockOrientation Forward="Left" Up="Down" />
              <BuiltBy>144115188075855914</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Warhead">
              <SubtypeName>SmallWarhead</SubtypeName>
              <EntityId>106669052424846362</EntityId>
              <Min x="-5" y="0" z="-3" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Warhead 5</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <CountdownMs>10000</CountdownMs>
              <IsArmed>true</IsArmed>
              <IsCountingDown>false</IsCountingDown>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Gyro">
              <SubtypeName>SmallBlockGyro</SubtypeName>
              <EntityId>135019716074466769</EntityId>
              <Min x="-5" y="0" z="0" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Gyroscope 4 R</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <GyroOverride>true</GyroOverride>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_BatteryBlock">
              <SubtypeName>SmallBlockSmallBatteryBlock</SubtypeName>
              <EntityId>137057627707166776</EntityId>
              <Min x="-5" y="0" z="1" />
              <BlockOrientation Forward="Down" Up="Left" />
              <Owner>144115188075855914</Owner>
              <BuiltBy>144115188075855914</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Small Battery 3</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <CurrentStoredPower>0.049999658</CurrentStoredPower>
              <ProducerEnabled>true</ProducerEnabled>
              <MaxStoredPower>0</MaxStoredPower>
              <SemiautoEnabled>false</SemiautoEnabled>
              <OnlyDischargeEnabled>false</OnlyDischargeEnabled>
              <ChargeMode>0</ChargeMode>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <Skeleton>
            <BoneInfo>
              <BonePosition x="-1" y="1" z="2" />
              <BoneOffset x="127" y="127" z="156" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-1" y="1" z="0" />
              <BoneOffset x="127" y="127" z="152" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-1" y="2" z="1" />
              <BoneOffset x="118" y="103" z="103" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-1" y="2" z="3" />
              <BoneOffset x="124" y="106" z="112" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-1" y="2" z="2" />
              <BoneOffset x="125" y="103" z="103" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="0" z="3" />
              <BoneOffset x="133" y="147" z="108" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-1" y="0" z="3" />
              <BoneOffset x="130" y="139" z="136" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-1" y="0" z="2" />
              <BoneOffset x="126" y="152" z="99" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-1" y="0" z="1" />
              <BoneOffset x="120" y="156" z="119" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-1" y="0" z="0" />
              <BoneOffset x="118" y="150" z="144" />
            </BoneInfo>
          </Skeleton>
          <LinearVelocity x="0.0238099266" y="0.0412003323" z="-0.09056142" />
          <AngularVelocity x="0.0354360826" y="-0.0467432067" z="-0.0350896344" />
          <ConveyorLines>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="0" z="0" />
              <StartDirection>Left</StartDirection>
              <EndPosition x="-1" y="0" z="0" />
              <EndDirection>Right</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="-1" y="0" z="0" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="-2" y="0" z="5" />
              <EndDirection>Right</EndDirection>
              <Sections>
                <Section Direction="Backward" Length="5" />
                <Section Direction="Left" Length="1" />
              </Sections>
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="-4" y="0" z="0" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="-4" y="0" z="1" />
              <EndDirection>Forward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="-4" y="0" z="0" />
              <StartDirection>Forward</StartDirection>
              <EndPosition x="-4" y="0" z="-1" />
              <EndDirection>Backward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="-1" y="0" z="0" />
              <StartDirection>Left</StartDirection>
              <EndPosition x="-4" y="0" z="0" />
              <EndDirection>Right</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
          </ConveyorLines>
          <DisplayName>Small Grid 9684</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>122605460174630276</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="56393.006697230783" y="21160.085495973708" z="-9531.6448231999257" />
            <Forward x="-0.583347" y="0.7938131" z="0.171951786" />
            <Up x="-0.198528916" y="0.06593005" z="-0.9778752" />
            <Orientation>
              <X>-0.282150269</X>
              <Y>0.71159476</Y>
              <Z>-0.6224357</Z>
              <W>0.163088679</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>OffroadSmallRealWheel5x5mirrored</SubtypeName>
              <EntityId>140348160181484289</EntityId>
              <BuiltBy>144115188075855914</BuiltBy>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="-0.0184437484" y="0.00382786617" z="0.007934828" />
          <AngularVelocity x="-0.000885115354" y="-0.0004567242" z="0.00247121579" />
          <DisplayName>Small Grid 276</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>111310693600520198</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="56394.681443603418" y="21154.152011891376" z="-9527.881030319335" />
            <Forward x="-0.669861734" y="-0.738948464" z="0.07239178" />
            <Up x="0.191510275" y="-0.07775502" z="0.978405952" />
            <Orientation>
              <X>0.328931659</X>
              <Y>0.654217</Y>
              <Z>0.656263232</Z>
              <W>0.181996346</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>OffroadSmallRealWheel5x5</SubtypeName>
              <EntityId>74781138194136161</EntityId>
              <BuiltBy>144115188075855914</BuiltBy>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="-0.009823281" y="0.00271147676" z="-0.006970899" />
          <AngularVelocity x="-0.00214324729" y="-0.004582028" z="0.008167249" />
          <DisplayName>Small Grid 198</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>103651986412578038</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="56390.612866578384" y="21162.903923541136" z="-9530.9528182946633" />
            <Forward x="0.572174251" y="-0.8030343" z="-0.166591465" />
            <Up x="-0.193720162" y="0.06504632" z="-0.9788983" />
            <Orientation>
              <X>-0.6255572</X>
              <Y>-0.159318879</Y>
              <Z>0.2759621</Z>
              <W>0.712138057</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>OffroadSmallRealWheel5x5mirrored</SubtypeName>
              <EntityId>87553957787692598</EntityId>
              <BuiltBy>144115188075855914</BuiltBy>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="-0.03370462" y="0.00288459659" z="0.009147412" />
          <AngularVelocity x="0.009238491" y="-0.009807191" z="0.00446733134" />
          <DisplayName>Small Grid 8038</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
      </CubeGrids>
      <EnvironmentType>None</EnvironmentType>
      <WorkshopId>0</WorkshopId>
      <OwnerSteamId>76561198204968289</OwnerSteamId>
      <Points>0</Points>
    </ShipBlueprint>
  </ShipBlueprints>
</Definitions>